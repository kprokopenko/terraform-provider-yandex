// Code generated by tfgen. DO NOT EDIT.

package yandex_ytsaurus_cluster

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/mapplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func YandexYtsaurusClusterResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Description:         "",
		MarkdownDescription: "",
		Version:             1,
		Attributes: map[string]schema.Attribute{

			"cluster_id": schema.StringAttribute{
				MarkdownDescription: "ID of the cluster to delete.",
				Description: "ID of the cluster to delete." +

					// proto paths: +
					// -> yandex.cloud.ytsaurus.v1.Cluster.id
					// -> yandex.cloud.ytsaurus.v1.DeleteClusterRequest.cluster_id
					// -> yandex.cloud.ytsaurus.v1.GetClusterRequest.cluster_id
					// -> yandex.cloud.ytsaurus.v1.UpdateClusterRequest.cluster_id
					"package: yandex.cloud.ytsaurus.v1\n" +
					"filename: yandex/cloud/ytsaurus/v1/cluster_service.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},

			"id": schema.StringAttribute{
				MarkdownDescription: "ID of the cluster to delete.",
				Description: "ID of the cluster to delete." +

					// proto paths: +
					// -> yandex.cloud.ytsaurus.v1.Cluster.id
					// -> yandex.cloud.ytsaurus.v1.DeleteClusterRequest.cluster_id
					// -> yandex.cloud.ytsaurus.v1.GetClusterRequest.cluster_id
					// -> yandex.cloud.ytsaurus.v1.UpdateClusterRequest.cluster_id
					"package: yandex.cloud.ytsaurus.v1\n" +
					"filename: yandex/cloud/ytsaurus/v1/cluster_service.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},

			"created_at": schema.StringAttribute{
				MarkdownDescription: "Time when the cluster was created.",
				Description: "Time when the cluster was created." +

					// proto paths: +
					// -> yandex.cloud.ytsaurus.v1.Cluster.created_at
					"package: yandex.cloud.ytsaurus.v1\n" +
					"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
				Computed: true,
			},

			"created_by": schema.StringAttribute{
				MarkdownDescription: "User who created the cluster.",
				Description: "User who created the cluster." +

					// proto paths: +
					// -> yandex.cloud.ytsaurus.v1.Cluster.created_by
					"package: yandex.cloud.ytsaurus.v1\n" +
					"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
				Computed: true,
			},

			"description": schema.StringAttribute{
				MarkdownDescription: "Description of the cluster.",
				Description: "Description of the cluster." +

					// proto paths: +
					// -> yandex.cloud.ytsaurus.v1.Cluster.description
					// -> yandex.cloud.ytsaurus.v1.CreateClusterRequest.description
					// -> yandex.cloud.ytsaurus.v1.UpdateClusterRequest.description
					"package: yandex.cloud.ytsaurus.v1\n" +
					"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},

			"endpoints": schema.SingleNestedAttribute{

				Attributes: map[string]schema.Attribute{

					"external_http_proxy_balancer": schema.StringAttribute{
						MarkdownDescription: "",
						Description: "" +

							// proto paths: +
							// -> yandex.cloud.ytsaurus.v1.Cluster.endpointsyandex.cloud.ytsaurus.v1.Cluster.Endpoints.external_http_proxy_balancer
							"package: yandex.cloud.ytsaurus.v1\n" +
							"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
						Computed: true,
					},

					"internal_http_proxies": schema.ListAttribute{
						ElementType:         types.StringType,
						MarkdownDescription: "",
						Description: "" +

							// proto paths: +
							// -> yandex.cloud.ytsaurus.v1.Cluster.endpointsyandex.cloud.ytsaurus.v1.Cluster.Endpoints.internal_http_proxies
							"package: yandex.cloud.ytsaurus.v1\n" +
							"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
						Computed: true,
					},

					"internal_http_proxy_alias": schema.StringAttribute{
						MarkdownDescription: "",
						Description: "" +

							// proto paths: +
							// -> yandex.cloud.ytsaurus.v1.Cluster.endpointsyandex.cloud.ytsaurus.v1.Cluster.Endpoints.internal_http_proxy_alias
							"package: yandex.cloud.ytsaurus.v1\n" +
							"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
						Computed: true,
					},

					"internal_rpc_proxies": schema.ListAttribute{
						ElementType:         types.StringType,
						MarkdownDescription: "",
						Description: "" +

							// proto paths: +
							// -> yandex.cloud.ytsaurus.v1.Cluster.endpointsyandex.cloud.ytsaurus.v1.Cluster.Endpoints.internal_rpc_proxies
							"package: yandex.cloud.ytsaurus.v1\n" +
							"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
						Computed: true,
					},

					"internal_rpc_proxy_alias": schema.StringAttribute{
						MarkdownDescription: "",
						Description: "" +

							// proto paths: +
							// -> yandex.cloud.ytsaurus.v1.Cluster.endpointsyandex.cloud.ytsaurus.v1.Cluster.Endpoints.internal_rpc_proxy_alias
							"package: yandex.cloud.ytsaurus.v1\n" +
							"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
						Computed: true,
					},

					"ui": schema.StringAttribute{
						MarkdownDescription: "",
						Description: "" +

							// proto paths: +
							// -> yandex.cloud.ytsaurus.v1.Cluster.endpointsyandex.cloud.ytsaurus.v1.Cluster.Endpoints.ui
							"package: yandex.cloud.ytsaurus.v1\n" +
							"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
						Computed: true,
					},
				},
				MarkdownDescription: "Endpoints of the cluster.",
				Description: "Endpoints of the cluster." +

					// proto paths: +
					// -> yandex.cloud.ytsaurus.v1.Cluster.endpoints
					"package: yandex.cloud.ytsaurus.v1\n" +
					"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
				Computed: true,
			},

			"folder_id": schema.StringAttribute{
				MarkdownDescription: "ID of the folder that the cluster belongs to.",
				Description: "ID of the folder that the cluster belongs to." +

					// proto paths: +
					// -> yandex.cloud.ytsaurus.v1.Cluster.folder_id
					// -> yandex.cloud.ytsaurus.v1.CreateClusterRequest.folder_id
					"package: yandex.cloud.ytsaurus.v1\n" +
					"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
					stringplanmodifier.UseStateForUnknown(),
				},
			},

			"health": schema.StringAttribute{
				MarkdownDescription: "Health of the cluster.",
				Description: "Health of the cluster." +

					// proto paths: +
					// -> yandex.cloud.ytsaurus.v1.Cluster.health
					"package: yandex.cloud.ytsaurus.v1\n" +
					"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
				Computed: true,
			},

			"labels": schema.MapAttribute{
				ElementType:         types.StringType,
				MarkdownDescription: "Cluster labels as `key:value` pairs.",
				Description: "Cluster labels as `key:value` pairs." +

					// proto paths: +
					// -> yandex.cloud.ytsaurus.v1.Cluster.labels
					// -> yandex.cloud.ytsaurus.v1.CreateClusterRequest.labels
					// -> yandex.cloud.ytsaurus.v1.UpdateClusterRequest.labels
					"package: yandex.cloud.ytsaurus.v1\n" +
					"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.Map{
					mapplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.Map{
					mapvalidator.ValueStringsAre(),
				},
			},

			"name": schema.StringAttribute{
				MarkdownDescription: "Name of the cluster.\n The name is unique within the folder.",
				Description: "Name of the cluster.\n The name is unique within the folder." +

					// proto paths: +
					// -> yandex.cloud.ytsaurus.v1.Cluster.name
					// -> yandex.cloud.ytsaurus.v1.CreateClusterRequest.name
					// -> yandex.cloud.ytsaurus.v1.UpdateClusterRequest.name
					"package: yandex.cloud.ytsaurus.v1\n" +
					"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^([a-zA-Z0-9ЁёА-я]\\S{1,61}[a-zA-Z0-9ЁёА-я])$"), "error validating regexp"),
					stringvalidator.LengthBetween(0, 63),
				},
			},

			"security_group_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				MarkdownDescription: "Network interfaces security groups.",
				Description: "Network interfaces security groups." +

					// proto paths: +
					// -> yandex.cloud.ytsaurus.v1.Cluster.security_group_ids
					// -> yandex.cloud.ytsaurus.v1.CreateClusterRequest.security_group_ids
					// -> yandex.cloud.ytsaurus.v1.UpdateClusterRequest.security_group_ids
					"package: yandex.cloud.ytsaurus.v1\n" +
					"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.List{
					listplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.List{
					listvalidator.ValueStringsAre(),
				},
			},

			"spec": schema.SingleNestedAttribute{

				Attributes: map[string]schema.Attribute{

					"compute": schema.ListNestedAttribute{
						NestedObject: schema.NestedAttributeObject{

							Attributes: map[string]schema.Attribute{

								"disks": schema.ListNestedAttribute{
									NestedObject: schema.NestedAttributeObject{

										Attributes: map[string]schema.Attribute{

											"locations": schema.ListAttribute{
												ElementType:         types.StringType,
												MarkdownDescription: "ID of the availability zone where the cluster resides.",
												Description: "ID of the availability zone where the cluster resides." +

													// proto paths: +
													// -> yandex.cloud.ytsaurus.v1.Cluster.specyandex.cloud.ytsaurus.v1.ClusterSpec.computeyandex.cloud.ytsaurus.v1.ComputeSpec.disksyandex.cloud.ytsaurus.v1.ComputeSpec.DiskSpec.locations
													// -> yandex.cloud.ytsaurus.v1.CreateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.computeyandex.cloud.ytsaurus.v1.ComputeSpec.disksyandex.cloud.ytsaurus.v1.ComputeSpec.DiskSpec.locations
													// -> yandex.cloud.ytsaurus.v1.UpdateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.computeyandex.cloud.ytsaurus.v1.ComputeSpec.disksyandex.cloud.ytsaurus.v1.ComputeSpec.DiskSpec.locations
													"package: yandex.cloud.ytsaurus.v1\n" +
													"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
												Optional: true,
												Computed: true,

												PlanModifiers: []planmodifier.List{
													listplanmodifier.UseStateForUnknown(),
												},
												Validators: []validator.List{
													listvalidator.ValueStringsAre(),
												},
											},

											"size_gb": schema.Int64Attribute{
												MarkdownDescription: "ID of the folder that the cluster belongs to.",
												Description: "ID of the folder that the cluster belongs to." +

													// proto paths: +
													// -> yandex.cloud.ytsaurus.v1.Cluster.specyandex.cloud.ytsaurus.v1.ClusterSpec.computeyandex.cloud.ytsaurus.v1.ComputeSpec.disksyandex.cloud.ytsaurus.v1.ComputeSpec.DiskSpec.size_gb
													// -> yandex.cloud.ytsaurus.v1.CreateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.computeyandex.cloud.ytsaurus.v1.ComputeSpec.disksyandex.cloud.ytsaurus.v1.ComputeSpec.DiskSpec.size_gb
													// -> yandex.cloud.ytsaurus.v1.UpdateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.computeyandex.cloud.ytsaurus.v1.ComputeSpec.disksyandex.cloud.ytsaurus.v1.ComputeSpec.DiskSpec.size_gb
													"package: yandex.cloud.ytsaurus.v1\n" +
													"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
												Optional: true,
												Computed: true,

												PlanModifiers: []planmodifier.Int64{
													int64planmodifier.UseStateForUnknown(),
												},
											},

											"type": schema.StringAttribute{
												MarkdownDescription: "ID of the cluster. Generated at creation time.",
												Description: "ID of the cluster. Generated at creation time." +

													// proto paths: +
													// -> yandex.cloud.ytsaurus.v1.Cluster.specyandex.cloud.ytsaurus.v1.ClusterSpec.computeyandex.cloud.ytsaurus.v1.ComputeSpec.disksyandex.cloud.ytsaurus.v1.ComputeSpec.DiskSpec.type
													// -> yandex.cloud.ytsaurus.v1.CreateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.computeyandex.cloud.ytsaurus.v1.ComputeSpec.disksyandex.cloud.ytsaurus.v1.ComputeSpec.DiskSpec.type
													// -> yandex.cloud.ytsaurus.v1.UpdateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.computeyandex.cloud.ytsaurus.v1.ComputeSpec.disksyandex.cloud.ytsaurus.v1.ComputeSpec.DiskSpec.type
													"package: yandex.cloud.ytsaurus.v1\n" +
													"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
												Optional: true,
												Computed: true,

												PlanModifiers: []planmodifier.String{
													stringplanmodifier.UseStateForUnknown(),
												},
											},
										},
									},
									MarkdownDescription: "",
									Description: "" +

										// proto paths: +
										// -> yandex.cloud.ytsaurus.v1.Cluster.specyandex.cloud.ytsaurus.v1.ClusterSpec.computeyandex.cloud.ytsaurus.v1.ComputeSpec.disks
										// -> yandex.cloud.ytsaurus.v1.CreateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.computeyandex.cloud.ytsaurus.v1.ComputeSpec.disks
										// -> yandex.cloud.ytsaurus.v1.UpdateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.computeyandex.cloud.ytsaurus.v1.ComputeSpec.disks
										"package: yandex.cloud.ytsaurus.v1\n" +
										"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
									Optional: true,
									Computed: true,

									PlanModifiers: []planmodifier.List{
										listplanmodifier.UseStateForUnknown(),
									},
								},

								"preset": schema.StringAttribute{
									MarkdownDescription: "",
									Description: "" +

										// proto paths: +
										// -> yandex.cloud.ytsaurus.v1.Cluster.specyandex.cloud.ytsaurus.v1.ClusterSpec.computeyandex.cloud.ytsaurus.v1.ComputeSpec.preset
										// -> yandex.cloud.ytsaurus.v1.CreateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.computeyandex.cloud.ytsaurus.v1.ComputeSpec.preset
										// -> yandex.cloud.ytsaurus.v1.UpdateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.computeyandex.cloud.ytsaurus.v1.ComputeSpec.preset
										"package: yandex.cloud.ytsaurus.v1\n" +
										"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
									Optional: true,
									Computed: true,

									PlanModifiers: []planmodifier.String{
										stringplanmodifier.UseStateForUnknown(),
									},
								},

								"scale_policy": schema.SingleNestedAttribute{

									Attributes: map[string]schema.Attribute{

										"auto": schema.SingleNestedAttribute{

											Attributes: map[string]schema.Attribute{

												"max_size": schema.Int64Attribute{
													MarkdownDescription: "",
													Description: "" +

														// proto paths: +
														// -> yandex.cloud.ytsaurus.v1.Cluster.specyandex.cloud.ytsaurus.v1.ClusterSpec.computeyandex.cloud.ytsaurus.v1.ComputeSpec.scale_policyyandex.cloud.ytsaurus.v1.ComputeSpec.ScalePolicy.autoyandex.cloud.ytsaurus.v1.ComputeSpec.ScalePolicy.AutoScale.max_size
														// -> yandex.cloud.ytsaurus.v1.CreateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.computeyandex.cloud.ytsaurus.v1.ComputeSpec.scale_policyyandex.cloud.ytsaurus.v1.ComputeSpec.ScalePolicy.autoyandex.cloud.ytsaurus.v1.ComputeSpec.ScalePolicy.AutoScale.max_size
														// -> yandex.cloud.ytsaurus.v1.UpdateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.computeyandex.cloud.ytsaurus.v1.ComputeSpec.scale_policyyandex.cloud.ytsaurus.v1.ComputeSpec.ScalePolicy.autoyandex.cloud.ytsaurus.v1.ComputeSpec.ScalePolicy.AutoScale.max_size
														"package: yandex.cloud.ytsaurus.v1\n" +
														"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
													Optional: true,
													Computed: true,

													PlanModifiers: []planmodifier.Int64{
														int64planmodifier.UseStateForUnknown(),
													},
												},

												"min_size": schema.Int64Attribute{
													MarkdownDescription: "",
													Description: "" +

														// proto paths: +
														// -> yandex.cloud.ytsaurus.v1.Cluster.specyandex.cloud.ytsaurus.v1.ClusterSpec.computeyandex.cloud.ytsaurus.v1.ComputeSpec.scale_policyyandex.cloud.ytsaurus.v1.ComputeSpec.ScalePolicy.autoyandex.cloud.ytsaurus.v1.ComputeSpec.ScalePolicy.AutoScale.min_size
														// -> yandex.cloud.ytsaurus.v1.CreateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.computeyandex.cloud.ytsaurus.v1.ComputeSpec.scale_policyyandex.cloud.ytsaurus.v1.ComputeSpec.ScalePolicy.autoyandex.cloud.ytsaurus.v1.ComputeSpec.ScalePolicy.AutoScale.min_size
														// -> yandex.cloud.ytsaurus.v1.UpdateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.computeyandex.cloud.ytsaurus.v1.ComputeSpec.scale_policyyandex.cloud.ytsaurus.v1.ComputeSpec.ScalePolicy.autoyandex.cloud.ytsaurus.v1.ComputeSpec.ScalePolicy.AutoScale.min_size
														"package: yandex.cloud.ytsaurus.v1\n" +
														"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
													Optional: true,
													Computed: true,

													PlanModifiers: []planmodifier.Int64{
														int64planmodifier.UseStateForUnknown(),
													},
												},
											},
											MarkdownDescription: "",
											Description: "" +

												// proto paths: +
												// -> yandex.cloud.ytsaurus.v1.Cluster.specyandex.cloud.ytsaurus.v1.ClusterSpec.computeyandex.cloud.ytsaurus.v1.ComputeSpec.scale_policyyandex.cloud.ytsaurus.v1.ComputeSpec.ScalePolicy.auto
												// -> yandex.cloud.ytsaurus.v1.CreateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.computeyandex.cloud.ytsaurus.v1.ComputeSpec.scale_policyyandex.cloud.ytsaurus.v1.ComputeSpec.ScalePolicy.auto
												// -> yandex.cloud.ytsaurus.v1.UpdateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.computeyandex.cloud.ytsaurus.v1.ComputeSpec.scale_policyyandex.cloud.ytsaurus.v1.ComputeSpec.ScalePolicy.auto
												"package: yandex.cloud.ytsaurus.v1\n" +
												"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
											Optional: true,
											Computed: true,

											PlanModifiers: []planmodifier.Object{
												objectplanmodifier.UseStateForUnknown(),
											},
										},

										"fixed": schema.SingleNestedAttribute{

											Attributes: map[string]schema.Attribute{

												"size": schema.Int64Attribute{
													MarkdownDescription: "ID of the cluster. Generated at creation time.",
													Description: "ID of the cluster. Generated at creation time." +

														// proto paths: +
														// -> yandex.cloud.ytsaurus.v1.Cluster.specyandex.cloud.ytsaurus.v1.ClusterSpec.computeyandex.cloud.ytsaurus.v1.ComputeSpec.scale_policyyandex.cloud.ytsaurus.v1.ComputeSpec.ScalePolicy.fixedyandex.cloud.ytsaurus.v1.ComputeSpec.ScalePolicy.FixedScale.size
														// -> yandex.cloud.ytsaurus.v1.CreateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.computeyandex.cloud.ytsaurus.v1.ComputeSpec.scale_policyyandex.cloud.ytsaurus.v1.ComputeSpec.ScalePolicy.fixedyandex.cloud.ytsaurus.v1.ComputeSpec.ScalePolicy.FixedScale.size
														// -> yandex.cloud.ytsaurus.v1.UpdateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.computeyandex.cloud.ytsaurus.v1.ComputeSpec.scale_policyyandex.cloud.ytsaurus.v1.ComputeSpec.ScalePolicy.fixedyandex.cloud.ytsaurus.v1.ComputeSpec.ScalePolicy.FixedScale.size
														"package: yandex.cloud.ytsaurus.v1\n" +
														"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
													Optional: true,
													Computed: true,

													PlanModifiers: []planmodifier.Int64{
														int64planmodifier.UseStateForUnknown(),
													},
												},
											},
											MarkdownDescription: "",
											Description: "" +

												// proto paths: +
												// -> yandex.cloud.ytsaurus.v1.Cluster.specyandex.cloud.ytsaurus.v1.ClusterSpec.computeyandex.cloud.ytsaurus.v1.ComputeSpec.scale_policyyandex.cloud.ytsaurus.v1.ComputeSpec.ScalePolicy.fixed
												// -> yandex.cloud.ytsaurus.v1.CreateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.computeyandex.cloud.ytsaurus.v1.ComputeSpec.scale_policyyandex.cloud.ytsaurus.v1.ComputeSpec.ScalePolicy.fixed
												// -> yandex.cloud.ytsaurus.v1.UpdateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.computeyandex.cloud.ytsaurus.v1.ComputeSpec.scale_policyyandex.cloud.ytsaurus.v1.ComputeSpec.ScalePolicy.fixed
												"package: yandex.cloud.ytsaurus.v1\n" +
												"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
											Optional: true,
											Computed: true,

											PlanModifiers: []planmodifier.Object{
												objectplanmodifier.UseStateForUnknown(),
											},
										},
									},
									MarkdownDescription: "",
									Description: "" +

										// proto paths: +
										// -> yandex.cloud.ytsaurus.v1.Cluster.specyandex.cloud.ytsaurus.v1.ClusterSpec.computeyandex.cloud.ytsaurus.v1.ComputeSpec.scale_policy
										// -> yandex.cloud.ytsaurus.v1.CreateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.computeyandex.cloud.ytsaurus.v1.ComputeSpec.scale_policy
										// -> yandex.cloud.ytsaurus.v1.UpdateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.computeyandex.cloud.ytsaurus.v1.ComputeSpec.scale_policy
										"package: yandex.cloud.ytsaurus.v1\n" +
										"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
									Optional: true,
									Computed: true,

									PlanModifiers: []planmodifier.Object{
										objectplanmodifier.UseStateForUnknown(),
									},
								},
							},
						},
						MarkdownDescription: "",
						Description: "" +

							// proto paths: +
							// -> yandex.cloud.ytsaurus.v1.Cluster.specyandex.cloud.ytsaurus.v1.ClusterSpec.compute
							// -> yandex.cloud.ytsaurus.v1.CreateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.compute
							// -> yandex.cloud.ytsaurus.v1.UpdateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.compute
							"package: yandex.cloud.ytsaurus.v1\n" +
							"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
						Optional: true,
						Computed: true,

						PlanModifiers: []planmodifier.List{
							listplanmodifier.UseStateForUnknown(),
						},
					},

					"proxy": schema.SingleNestedAttribute{

						Attributes: map[string]schema.Attribute{

							"http": schema.SingleNestedAttribute{

								Attributes: map[string]schema.Attribute{

									"count": schema.Int64Attribute{
										MarkdownDescription: "",
										Description: "" +

											// proto paths: +
											// -> yandex.cloud.ytsaurus.v1.Cluster.specyandex.cloud.ytsaurus.v1.ClusterSpec.proxyyandex.cloud.ytsaurus.v1.ProxySpec.httpyandex.cloud.ytsaurus.v1.HttpProxySpec.count
											// -> yandex.cloud.ytsaurus.v1.CreateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.proxyyandex.cloud.ytsaurus.v1.ProxySpec.httpyandex.cloud.ytsaurus.v1.HttpProxySpec.count
											// -> yandex.cloud.ytsaurus.v1.UpdateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.proxyyandex.cloud.ytsaurus.v1.ProxySpec.httpyandex.cloud.ytsaurus.v1.HttpProxySpec.count
											"package: yandex.cloud.ytsaurus.v1\n" +
											"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
										Optional: true,
										Computed: true,

										PlanModifiers: []planmodifier.Int64{
											int64planmodifier.UseStateForUnknown(),
										},
									},
								},
								MarkdownDescription: "",
								Description: "" +

									// proto paths: +
									// -> yandex.cloud.ytsaurus.v1.Cluster.specyandex.cloud.ytsaurus.v1.ClusterSpec.proxyyandex.cloud.ytsaurus.v1.ProxySpec.http
									// -> yandex.cloud.ytsaurus.v1.CreateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.proxyyandex.cloud.ytsaurus.v1.ProxySpec.http
									// -> yandex.cloud.ytsaurus.v1.UpdateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.proxyyandex.cloud.ytsaurus.v1.ProxySpec.http
									"package: yandex.cloud.ytsaurus.v1\n" +
									"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
								Optional: true,
								Computed: true,

								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.UseStateForUnknown(),
								},
							},

							"rpc": schema.SingleNestedAttribute{

								Attributes: map[string]schema.Attribute{

									"count": schema.Int64Attribute{
										MarkdownDescription: "",
										Description: "" +

											// proto paths: +
											// -> yandex.cloud.ytsaurus.v1.Cluster.specyandex.cloud.ytsaurus.v1.ClusterSpec.proxyyandex.cloud.ytsaurus.v1.ProxySpec.rpcyandex.cloud.ytsaurus.v1.RpcProxySpec.count
											// -> yandex.cloud.ytsaurus.v1.CreateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.proxyyandex.cloud.ytsaurus.v1.ProxySpec.rpcyandex.cloud.ytsaurus.v1.RpcProxySpec.count
											// -> yandex.cloud.ytsaurus.v1.UpdateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.proxyyandex.cloud.ytsaurus.v1.ProxySpec.rpcyandex.cloud.ytsaurus.v1.RpcProxySpec.count
											"package: yandex.cloud.ytsaurus.v1\n" +
											"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
										Optional: true,
										Computed: true,

										PlanModifiers: []planmodifier.Int64{
											int64planmodifier.UseStateForUnknown(),
										},
									},
								},
								MarkdownDescription: "",
								Description: "" +

									// proto paths: +
									// -> yandex.cloud.ytsaurus.v1.Cluster.specyandex.cloud.ytsaurus.v1.ClusterSpec.proxyyandex.cloud.ytsaurus.v1.ProxySpec.rpc
									// -> yandex.cloud.ytsaurus.v1.CreateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.proxyyandex.cloud.ytsaurus.v1.ProxySpec.rpc
									// -> yandex.cloud.ytsaurus.v1.UpdateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.proxyyandex.cloud.ytsaurus.v1.ProxySpec.rpc
									"package: yandex.cloud.ytsaurus.v1\n" +
									"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
								Optional: true,
								Computed: true,

								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.UseStateForUnknown(),
								},
							},
						},
						MarkdownDescription: "",
						Description: "" +

							// proto paths: +
							// -> yandex.cloud.ytsaurus.v1.Cluster.specyandex.cloud.ytsaurus.v1.ClusterSpec.proxy
							// -> yandex.cloud.ytsaurus.v1.CreateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.proxy
							// -> yandex.cloud.ytsaurus.v1.UpdateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.proxy
							"package: yandex.cloud.ytsaurus.v1\n" +
							"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
						Optional: true,
						Computed: true,

						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.UseStateForUnknown(),
						},
					},

					"storage": schema.SingleNestedAttribute{

						Attributes: map[string]schema.Attribute{

							"hdd": schema.SingleNestedAttribute{

								Attributes: map[string]schema.Attribute{

									"count": schema.Int64Attribute{
										MarkdownDescription: "ID of the folder that the cluster belongs to.",
										Description: "ID of the folder that the cluster belongs to." +

											// proto paths: +
											// -> yandex.cloud.ytsaurus.v1.Cluster.specyandex.cloud.ytsaurus.v1.ClusterSpec.storageyandex.cloud.ytsaurus.v1.StorageSpec.hddyandex.cloud.ytsaurus.v1.StorageSpec.HddSpec.count
											// -> yandex.cloud.ytsaurus.v1.CreateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.storageyandex.cloud.ytsaurus.v1.StorageSpec.hddyandex.cloud.ytsaurus.v1.StorageSpec.HddSpec.count
											// -> yandex.cloud.ytsaurus.v1.UpdateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.storageyandex.cloud.ytsaurus.v1.StorageSpec.hddyandex.cloud.ytsaurus.v1.StorageSpec.HddSpec.count
											"package: yandex.cloud.ytsaurus.v1\n" +
											"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
										Optional: true,
										Computed: true,

										PlanModifiers: []planmodifier.Int64{
											int64planmodifier.UseStateForUnknown(),
										},
									},

									"size_gb": schema.Int64Attribute{
										MarkdownDescription: "ID of the cluster. Generated at creation time.",
										Description: "ID of the cluster. Generated at creation time." +

											// proto paths: +
											// -> yandex.cloud.ytsaurus.v1.Cluster.specyandex.cloud.ytsaurus.v1.ClusterSpec.storageyandex.cloud.ytsaurus.v1.StorageSpec.hddyandex.cloud.ytsaurus.v1.StorageSpec.HddSpec.size_gb
											// -> yandex.cloud.ytsaurus.v1.CreateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.storageyandex.cloud.ytsaurus.v1.StorageSpec.hddyandex.cloud.ytsaurus.v1.StorageSpec.HddSpec.size_gb
											// -> yandex.cloud.ytsaurus.v1.UpdateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.storageyandex.cloud.ytsaurus.v1.StorageSpec.hddyandex.cloud.ytsaurus.v1.StorageSpec.HddSpec.size_gb
											"package: yandex.cloud.ytsaurus.v1\n" +
											"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
										Optional: true,
										Computed: true,

										PlanModifiers: []planmodifier.Int64{
											int64planmodifier.UseStateForUnknown(),
										},
									},
								},
								MarkdownDescription: "",
								Description: "" +

									// proto paths: +
									// -> yandex.cloud.ytsaurus.v1.Cluster.specyandex.cloud.ytsaurus.v1.ClusterSpec.storageyandex.cloud.ytsaurus.v1.StorageSpec.hdd
									// -> yandex.cloud.ytsaurus.v1.CreateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.storageyandex.cloud.ytsaurus.v1.StorageSpec.hdd
									// -> yandex.cloud.ytsaurus.v1.UpdateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.storageyandex.cloud.ytsaurus.v1.StorageSpec.hdd
									"package: yandex.cloud.ytsaurus.v1\n" +
									"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
								Optional: true,
								Computed: true,

								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.UseStateForUnknown(),
								},
							},

							"ssd": schema.SingleNestedAttribute{

								Attributes: map[string]schema.Attribute{

									"count": schema.Int64Attribute{
										MarkdownDescription: "",
										Description: "" +

											// proto paths: +
											// -> yandex.cloud.ytsaurus.v1.Cluster.specyandex.cloud.ytsaurus.v1.ClusterSpec.storageyandex.cloud.ytsaurus.v1.StorageSpec.ssdyandex.cloud.ytsaurus.v1.StorageSpec.SsdSpec.count
											// -> yandex.cloud.ytsaurus.v1.CreateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.storageyandex.cloud.ytsaurus.v1.StorageSpec.ssdyandex.cloud.ytsaurus.v1.StorageSpec.SsdSpec.count
											// -> yandex.cloud.ytsaurus.v1.UpdateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.storageyandex.cloud.ytsaurus.v1.StorageSpec.ssdyandex.cloud.ytsaurus.v1.StorageSpec.SsdSpec.count
											"package: yandex.cloud.ytsaurus.v1\n" +
											"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
										Optional: true,
										Computed: true,

										PlanModifiers: []planmodifier.Int64{
											int64planmodifier.UseStateForUnknown(),
										},
									},

									"size_gb": schema.Int64Attribute{
										MarkdownDescription: "",
										Description: "" +

											// proto paths: +
											// -> yandex.cloud.ytsaurus.v1.Cluster.specyandex.cloud.ytsaurus.v1.ClusterSpec.storageyandex.cloud.ytsaurus.v1.StorageSpec.ssdyandex.cloud.ytsaurus.v1.StorageSpec.SsdSpec.size_gb
											// -> yandex.cloud.ytsaurus.v1.CreateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.storageyandex.cloud.ytsaurus.v1.StorageSpec.ssdyandex.cloud.ytsaurus.v1.StorageSpec.SsdSpec.size_gb
											// -> yandex.cloud.ytsaurus.v1.UpdateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.storageyandex.cloud.ytsaurus.v1.StorageSpec.ssdyandex.cloud.ytsaurus.v1.StorageSpec.SsdSpec.size_gb
											"package: yandex.cloud.ytsaurus.v1\n" +
											"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
										Optional: true,
										Computed: true,

										PlanModifiers: []planmodifier.Int64{
											int64planmodifier.UseStateForUnknown(),
										},
									},

									"type": schema.StringAttribute{
										MarkdownDescription: "",
										Description: "" +

											// proto paths: +
											// -> yandex.cloud.ytsaurus.v1.Cluster.specyandex.cloud.ytsaurus.v1.ClusterSpec.storageyandex.cloud.ytsaurus.v1.StorageSpec.ssdyandex.cloud.ytsaurus.v1.StorageSpec.SsdSpec.type
											// -> yandex.cloud.ytsaurus.v1.CreateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.storageyandex.cloud.ytsaurus.v1.StorageSpec.ssdyandex.cloud.ytsaurus.v1.StorageSpec.SsdSpec.type
											// -> yandex.cloud.ytsaurus.v1.UpdateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.storageyandex.cloud.ytsaurus.v1.StorageSpec.ssdyandex.cloud.ytsaurus.v1.StorageSpec.SsdSpec.type
											"package: yandex.cloud.ytsaurus.v1\n" +
											"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
										Optional: true,
										Computed: true,

										PlanModifiers: []planmodifier.String{
											stringplanmodifier.UseStateForUnknown(),
										},
									},
								},
								MarkdownDescription: "",
								Description: "" +

									// proto paths: +
									// -> yandex.cloud.ytsaurus.v1.Cluster.specyandex.cloud.ytsaurus.v1.ClusterSpec.storageyandex.cloud.ytsaurus.v1.StorageSpec.ssd
									// -> yandex.cloud.ytsaurus.v1.CreateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.storageyandex.cloud.ytsaurus.v1.StorageSpec.ssd
									// -> yandex.cloud.ytsaurus.v1.UpdateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.storageyandex.cloud.ytsaurus.v1.StorageSpec.ssd
									"package: yandex.cloud.ytsaurus.v1\n" +
									"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
								Optional: true,
								Computed: true,

								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.UseStateForUnknown(),
								},
							},
						},
						MarkdownDescription: "",
						Description: "" +

							// proto paths: +
							// -> yandex.cloud.ytsaurus.v1.Cluster.specyandex.cloud.ytsaurus.v1.ClusterSpec.storage
							// -> yandex.cloud.ytsaurus.v1.CreateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.storage
							// -> yandex.cloud.ytsaurus.v1.UpdateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.storage
							"package: yandex.cloud.ytsaurus.v1\n" +
							"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
						Optional: true,
						Computed: true,

						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.UseStateForUnknown(),
						},
					},

					"tablet": schema.SingleNestedAttribute{

						Attributes: map[string]schema.Attribute{

							"count": schema.Int64Attribute{
								MarkdownDescription: "",
								Description: "" +

									// proto paths: +
									// -> yandex.cloud.ytsaurus.v1.Cluster.specyandex.cloud.ytsaurus.v1.ClusterSpec.tabletyandex.cloud.ytsaurus.v1.TabletSpec.count
									// -> yandex.cloud.ytsaurus.v1.CreateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.tabletyandex.cloud.ytsaurus.v1.TabletSpec.count
									// -> yandex.cloud.ytsaurus.v1.UpdateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.tabletyandex.cloud.ytsaurus.v1.TabletSpec.count
									"package: yandex.cloud.ytsaurus.v1\n" +
									"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
								Optional: true,
								Computed: true,

								PlanModifiers: []planmodifier.Int64{
									int64planmodifier.UseStateForUnknown(),
								},
							},

							"preset": schema.StringAttribute{
								MarkdownDescription: "",
								Description: "" +

									// proto paths: +
									// -> yandex.cloud.ytsaurus.v1.Cluster.specyandex.cloud.ytsaurus.v1.ClusterSpec.tabletyandex.cloud.ytsaurus.v1.TabletSpec.preset
									// -> yandex.cloud.ytsaurus.v1.CreateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.tabletyandex.cloud.ytsaurus.v1.TabletSpec.preset
									// -> yandex.cloud.ytsaurus.v1.UpdateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.tabletyandex.cloud.ytsaurus.v1.TabletSpec.preset
									"package: yandex.cloud.ytsaurus.v1\n" +
									"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
								Optional: true,
								Computed: true,

								PlanModifiers: []planmodifier.String{
									stringplanmodifier.UseStateForUnknown(),
								},
							},
						},
						MarkdownDescription: "",
						Description: "" +

							// proto paths: +
							// -> yandex.cloud.ytsaurus.v1.Cluster.specyandex.cloud.ytsaurus.v1.ClusterSpec.tablet
							// -> yandex.cloud.ytsaurus.v1.CreateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.tablet
							// -> yandex.cloud.ytsaurus.v1.UpdateClusterRequest.specyandex.cloud.ytsaurus.v1.ClusterSpec.tablet
							"package: yandex.cloud.ytsaurus.v1\n" +
							"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
						Optional: true,
						Computed: true,

						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.UseStateForUnknown(),
						},
					},
				},
				MarkdownDescription: "Cluster specification.",
				Description: "Cluster specification." +

					// proto paths: +
					// -> yandex.cloud.ytsaurus.v1.Cluster.spec
					// -> yandex.cloud.ytsaurus.v1.CreateClusterRequest.spec
					// -> yandex.cloud.ytsaurus.v1.UpdateClusterRequest.spec
					"package: yandex.cloud.ytsaurus.v1\n" +
					"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.UseStateForUnknown(),
				},
			},

			"status": schema.StringAttribute{
				MarkdownDescription: "Status of the cluster.",
				Description: "Status of the cluster." +

					// proto paths: +
					// -> yandex.cloud.ytsaurus.v1.Cluster.status
					"package: yandex.cloud.ytsaurus.v1\n" +
					"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
				Computed: true,
			},

			"subnet_id": schema.StringAttribute{
				MarkdownDescription: "ID of the subnet where the cluster resides.",
				Description: "ID of the subnet where the cluster resides." +

					// proto paths: +
					// -> yandex.cloud.ytsaurus.v1.Cluster.subnet_id
					// -> yandex.cloud.ytsaurus.v1.CreateClusterRequest.subnet_id
					// -> yandex.cloud.ytsaurus.v1.UpdateClusterRequest.subnet_id
					"package: yandex.cloud.ytsaurus.v1\n" +
					"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
				Required: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},

			"updated_at": schema.StringAttribute{
				MarkdownDescription: "Time when the cluster was last updated.",
				Description: "Time when the cluster was last updated." +

					// proto paths: +
					// -> yandex.cloud.ytsaurus.v1.Cluster.updated_at
					"package: yandex.cloud.ytsaurus.v1\n" +
					"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
				Computed: true,
			},

			"updated_by": schema.StringAttribute{
				MarkdownDescription: "User who last updated the cluster.",
				Description: "User who last updated the cluster." +

					// proto paths: +
					// -> yandex.cloud.ytsaurus.v1.Cluster.updated_by
					"package: yandex.cloud.ytsaurus.v1\n" +
					"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
				Computed: true,
			},

			"zone_id": schema.StringAttribute{
				MarkdownDescription: "ID of the availability zone where the cluster resides.",
				Description: "ID of the availability zone where the cluster resides." +

					// proto paths: +
					// -> yandex.cloud.ytsaurus.v1.Cluster.zone_id
					// -> yandex.cloud.ytsaurus.v1.CreateClusterRequest.zone_id
					"package: yandex.cloud.ytsaurus.v1\n" +
					"filename: yandex/cloud/ytsaurus/v1/cluster.proto\n",
				Required: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"timeouts": timeouts.AttributesAll(ctx),
		},

		Blocks: map[string]schema.Block{},
	}
}
