// Code generated by tfgen. DO NOT EDIT.

package yandex_ytsaurus_cluster

import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	ytsaurus "github.com/yandex-cloud/go-genproto/yandex/cloud/ytsaurus/v1"
	ytsaurusv1sdk "github.com/yandex-cloud/go-sdk/services/ytsaurus/v1"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/converter"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/validate"
	provider_config "github.com/yandex-cloud/terraform-provider-yandex/yandex-framework/provider/config"
	"google.golang.org/genproto/protobuf/field_mask"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/metadata"
)

var _ resource.ResourceWithConfigure = (*yandexYtsaurusClusterResource)(nil)
var _ resource.ResourceWithImportState = (*yandexYtsaurusClusterResource)(nil)

type yandexYtsaurusClusterResource struct {
	providerConfig *provider_config.Config
}

func NewResource() resource.Resource {
	return &yandexYtsaurusClusterResource{}
}

func (r *yandexYtsaurusClusterResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "yandex_ytsaurus_cluster"
}

func (r *yandexYtsaurusClusterResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerConfig, ok := req.ProviderData.(*provider_config.Config)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *provider_config.Config, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)
		return
	}

	r.providerConfig = providerConfig
}

func (r *yandexYtsaurusClusterResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = YandexYtsaurusClusterResourceSchema(ctx)
}

func (r *yandexYtsaurusClusterResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("cluster_id"), req, resp)
}

func (r *yandexYtsaurusClusterResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state yandexYtsaurusClusterModel
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	readTimeout, timeoutInitError := state.Timeouts.Read(ctx, provider_config.DefaultTimeout)
	if timeoutInitError != nil {
		resp.Diagnostics.Append(timeoutInitError...)
		return
	}

	ctx, cancel := context.WithTimeout(ctx, readTimeout)
	defer cancel()

	reqApi := &ytsaurus.GetClusterRequest{}
	id := state.ID.ValueString()
	if !state.ClusterId.IsUnknown() && !state.ClusterId.IsNull() {
		id = state.ClusterId.ValueString()
	}
	reqApi.SetClusterId(id)

	tflog.Debug(ctx, fmt.Sprintf("Read cluster request: %s", validate.ProtoDump(reqApi)))

	md := new(metadata.MD)
	res, err := ytsaurusv1sdk.NewClusterClient(r.providerConfig.SDKv2).Get(ctx, reqApi, grpc.Header(md))
	if traceHeader := md.Get("x-server-trace-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Read cluster x-server-trace-id: %s", traceHeader[0]))
	}
	if traceHeader := md.Get("x-server-request-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Read cluster x-server-request-id: %s", traceHeader[0]))
	}
	if err != nil {
		if validate.IsStatusWithCode(err, codes.NotFound) {
			resp.Diagnostics.AddWarning(
				"Failed to Read resource",
				"cluster not found",
			)
		} else {
			resp.Diagnostics.AddError(
				"Failed to Read resource",
				"Error while requesting API to get cluster:"+err.Error(),
			)
		}
	}

	tflog.Debug(ctx, fmt.Sprintf("Read cluster response: %s", validate.ProtoDump(res)))

	if resp.Diagnostics.HasError() {
		return
	}

	// diagnostics don't have errors and resource is nil => resource not found
	if res == nil {
		resp.Diagnostics.AddError("Failed to read", "Resource not found")
		return
	}

	newState := flattenYandexYtsaurusCluster(ctx, res, state, state.Timeouts, &resp.Diagnostics)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &newState)...)
	if resp.Diagnostics.HasError() {
		return
	}
}

func (r *yandexYtsaurusClusterResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan yandexYtsaurusClusterModel
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	createTimeout, timeoutInitError := plan.Timeouts.Create(ctx, time.Duration(600)*time.Minute)
	if timeoutInitError != nil {
		resp.Diagnostics.Append(timeoutInitError...)
		return
	}

	ctx, cancel := context.WithTimeout(ctx, createTimeout)
	defer cancel()

	createReq := &ytsaurus.CreateClusterRequest{}
	createReq.SetFolderId(converter.GetFolderID(plan.FolderId.ValueString(), r.providerConfig, &diags))
	createReq.SetZoneId(plan.ZoneId.ValueString())
	createReq.SetName(plan.Name.ValueString())
	createReq.SetDescription(plan.Description.ValueString())
	createReq.SetLabels(expandYandexYtsaurusClusterLabels(ctx, plan.Labels, &diags))
	createReq.SetSubnetId(plan.SubnetId.ValueString())
	createReq.SetSecurityGroupIds(expandYandexYtsaurusClusterSecurityGroupIds(ctx, plan.SecurityGroupIds, &diags))
	createReq.SetSpec(expandYandexYtsaurusClusterSpec(ctx, plan.Spec, &diags))
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("Create cluster request: %s", validate.ProtoDump(createReq)))

	md := new(metadata.MD)
	op, err := ytsaurusv1sdk.NewClusterClient(r.providerConfig.SDKv2).Create(ctx, createReq, grpc.Header(md))
	if traceHeader := md.Get("x-server-trace-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("[DEBUG] Create cluster x-server-trace-id: %s", traceHeader[0]))
	}
	if traceHeader := md.Get("x-server-request-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Create cluster x-server-request-id: %s", traceHeader[0]))
	}
	if err != nil {
		resp.Diagnostics.AddError(
			"Failed to Create resource",
			"Error while requesting API to create cluster:"+err.Error(),
		)
		return
	}
	createRes, err := op.Wait(ctx)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unable to Create Resource",
			fmt.Sprintf("An unexpected error occurred while waiting longrunning response. "+
				"Please retry the operation or report this issue to the provider developers.\n\n"+
				"Error: %s", err),
		)
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("Create cluster response: %s", validate.ProtoDump(createRes)))

	plan.ClusterId = types.StringValue(createRes.Id)

	reqApi := &ytsaurus.GetClusterRequest{}
	reqApi.SetClusterId(plan.ClusterId.ValueString())

	tflog.Debug(ctx, fmt.Sprintf("Read cluster request: %s", validate.ProtoDump(reqApi)))

	md = new(metadata.MD)
	res, err := ytsaurusv1sdk.NewClusterClient(r.providerConfig.SDKv2).Get(ctx, reqApi, grpc.Header(md))
	if traceHeader := md.Get("x-server-trace-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Read cluster x-server-trace-id: %s", traceHeader[0]))
	}
	if traceHeader := md.Get("x-server-request-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Read cluster x-server-request-id: %s", traceHeader[0]))
	}
	if err != nil {
		if validate.IsStatusWithCode(err, codes.NotFound) {
			resp.Diagnostics.AddWarning(
				"Failed to Read resource",
				"cluster not found",
			)
		} else {
			resp.Diagnostics.AddError(
				"Failed to Read resource",
				"Error while requesting API to get cluster:"+err.Error(),
			)
		}
	}

	tflog.Debug(ctx, fmt.Sprintf("Read cluster response: %s", validate.ProtoDump(res)))

	if resp.Diagnostics.HasError() {
		return
	}

	// diagnostics don't have errors and resource is nil => resource not found
	if res == nil {
		resp.Diagnostics.AddError("Failed to read", "Resource not found")
		return
	}

	newState := flattenYandexYtsaurusCluster(ctx, res, plan, plan.Timeouts, &resp.Diagnostics)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &newState)...)
	if resp.Diagnostics.HasError() {
		return
	}
}

func (r *yandexYtsaurusClusterResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state yandexYtsaurusClusterModel
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	deleteTimeout, timeoutInitError := state.Timeouts.Delete(ctx, time.Duration(600)*time.Minute)
	if timeoutInitError != nil {
		resp.Diagnostics.Append(timeoutInitError...)
		return
	}

	ctx, cancel := context.WithTimeout(ctx, deleteTimeout)
	defer cancel()

	reqApi := &ytsaurus.DeleteClusterRequest{}
	id := state.ID.ValueString()
	if !state.ClusterId.IsUnknown() && !state.ClusterId.IsNull() {
		id = state.ClusterId.ValueString()
	}
	reqApi.SetClusterId(id)

	tflog.Debug(ctx, fmt.Sprintf("Delete cluster request: %s", validate.ProtoDump(reqApi)))

	md := new(metadata.MD)

	op, err := ytsaurusv1sdk.NewClusterClient(r.providerConfig.SDKv2).Delete(ctx, reqApi, grpc.Header(md))
	if traceHeader := md.Get("x-server-trace-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Delete cluster x-server-trace-id: %s", traceHeader[0]))
	}
	if traceHeader := md.Get("x-server-request-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Delete cluster x-server-request-id: %s", traceHeader[0]))
	}
	if err != nil {
		resp.Diagnostics.AddError(
			"Failed to Delete resource",
			"Error while requesting API to delete cluster:"+err.Error(),
		)
		return
	}
	deleteRes, err := op.Wait(ctx)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unable to Delete Resource",
			fmt.Sprintf("An unexpected error occurred while waiting longrunning response. "+
				"Please retry the operation or report this issue to the provider developers.\n\n"+
				"Error: %s", err),
		)
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("[DEBUG] Delete cluster response: %s", validate.ProtoDump(deleteRes)))
}

func (r *yandexYtsaurusClusterResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state yandexYtsaurusClusterModel
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	diags = req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	updateTimeout, timeoutInitError := plan.Timeouts.Update(ctx, time.Duration(600)*time.Minute)
	if timeoutInitError != nil {
		resp.Diagnostics.Append(timeoutInitError...)
		return
	}

	ctx, cancel := context.WithTimeout(ctx, updateTimeout)
	defer cancel()
	var updatePaths []string

	if !plan.ClusterId.Equal(state.ClusterId) {
		updatePaths = append(updatePaths, "cluster_id")
	}
	if !plan.Description.Equal(state.Description) {
		updatePaths = append(updatePaths, "description")
	}
	if !plan.FolderId.Equal(state.FolderId) {
		updatePaths = append(updatePaths, "folder_id")
	}
	if !plan.Labels.Equal(state.Labels) {
		updatePaths = append(updatePaths, "labels")
	}
	if !plan.Name.Equal(state.Name) {
		updatePaths = append(updatePaths, "name")
	}
	if !plan.SecurityGroupIds.Equal(state.SecurityGroupIds) {
		updatePaths = append(updatePaths, "security_group_ids")
	}

	var yandexYtsaurusClusterSpecState, yandexYtsaurusClusterSpecPlan yandexYtsaurusClusterSpecModel
	resp.Diagnostics.Append(plan.Spec.As(ctx, &yandexYtsaurusClusterSpecPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(state.Spec.As(ctx, &yandexYtsaurusClusterSpecState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexYtsaurusClusterSpecPlan.Compute.Equal(yandexYtsaurusClusterSpecState.Compute) {
		updatePaths = append(updatePaths, "spec.compute")
	}

	var yandexYtsaurusClusterSpecProxyState, yandexYtsaurusClusterSpecProxyPlan yandexYtsaurusClusterSpecProxyModel
	resp.Diagnostics.Append(yandexYtsaurusClusterSpecPlan.Proxy.As(ctx, &yandexYtsaurusClusterSpecProxyPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexYtsaurusClusterSpecState.Proxy.As(ctx, &yandexYtsaurusClusterSpecProxyState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexYtsaurusClusterSpecProxyHttpState, yandexYtsaurusClusterSpecProxyHttpPlan yandexYtsaurusClusterSpecProxyHttpModel
	resp.Diagnostics.Append(yandexYtsaurusClusterSpecProxyPlan.Http.As(ctx, &yandexYtsaurusClusterSpecProxyHttpPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexYtsaurusClusterSpecProxyState.Http.As(ctx, &yandexYtsaurusClusterSpecProxyHttpState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexYtsaurusClusterSpecProxyHttpPlan.Count.Equal(yandexYtsaurusClusterSpecProxyHttpState.Count) {
		updatePaths = append(updatePaths, "spec.proxy.http.count")
	}

	var yandexYtsaurusClusterSpecProxyRpcState, yandexYtsaurusClusterSpecProxyRpcPlan yandexYtsaurusClusterSpecProxyRpcModel
	resp.Diagnostics.Append(yandexYtsaurusClusterSpecProxyPlan.Rpc.As(ctx, &yandexYtsaurusClusterSpecProxyRpcPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexYtsaurusClusterSpecProxyState.Rpc.As(ctx, &yandexYtsaurusClusterSpecProxyRpcState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexYtsaurusClusterSpecProxyRpcPlan.Count.Equal(yandexYtsaurusClusterSpecProxyRpcState.Count) {
		updatePaths = append(updatePaths, "spec.proxy.rpc.count")
	}

	var yandexYtsaurusClusterSpecStorageState, yandexYtsaurusClusterSpecStoragePlan yandexYtsaurusClusterSpecStorageModel
	resp.Diagnostics.Append(yandexYtsaurusClusterSpecPlan.Storage.As(ctx, &yandexYtsaurusClusterSpecStoragePlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexYtsaurusClusterSpecState.Storage.As(ctx, &yandexYtsaurusClusterSpecStorageState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexYtsaurusClusterSpecStorageHddState, yandexYtsaurusClusterSpecStorageHddPlan yandexYtsaurusClusterSpecStorageHddModel
	resp.Diagnostics.Append(yandexYtsaurusClusterSpecStoragePlan.Hdd.As(ctx, &yandexYtsaurusClusterSpecStorageHddPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexYtsaurusClusterSpecStorageState.Hdd.As(ctx, &yandexYtsaurusClusterSpecStorageHddState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexYtsaurusClusterSpecStorageHddPlan.Count.Equal(yandexYtsaurusClusterSpecStorageHddState.Count) {
		updatePaths = append(updatePaths, "spec.storage.hdd.count")
	}
	if !yandexYtsaurusClusterSpecStorageHddPlan.SizeGb.Equal(yandexYtsaurusClusterSpecStorageHddState.SizeGb) {
		updatePaths = append(updatePaths, "spec.storage.hdd.size_gb")
	}

	var yandexYtsaurusClusterSpecStorageSsdState, yandexYtsaurusClusterSpecStorageSsdPlan yandexYtsaurusClusterSpecStorageSsdModel
	resp.Diagnostics.Append(yandexYtsaurusClusterSpecStoragePlan.Ssd.As(ctx, &yandexYtsaurusClusterSpecStorageSsdPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexYtsaurusClusterSpecStorageState.Ssd.As(ctx, &yandexYtsaurusClusterSpecStorageSsdState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexYtsaurusClusterSpecStorageSsdPlan.Count.Equal(yandexYtsaurusClusterSpecStorageSsdState.Count) {
		updatePaths = append(updatePaths, "spec.storage.ssd.count")
	}
	if !yandexYtsaurusClusterSpecStorageSsdPlan.SizeGb.Equal(yandexYtsaurusClusterSpecStorageSsdState.SizeGb) {
		updatePaths = append(updatePaths, "spec.storage.ssd.size_gb")
	}
	if !yandexYtsaurusClusterSpecStorageSsdPlan.Type.Equal(yandexYtsaurusClusterSpecStorageSsdState.Type) {
		updatePaths = append(updatePaths, "spec.storage.ssd.type")
	}

	var yandexYtsaurusClusterSpecTabletState, yandexYtsaurusClusterSpecTabletPlan yandexYtsaurusClusterSpecTabletModel
	resp.Diagnostics.Append(yandexYtsaurusClusterSpecPlan.Tablet.As(ctx, &yandexYtsaurusClusterSpecTabletPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexYtsaurusClusterSpecState.Tablet.As(ctx, &yandexYtsaurusClusterSpecTabletState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexYtsaurusClusterSpecTabletPlan.Count.Equal(yandexYtsaurusClusterSpecTabletState.Count) {
		updatePaths = append(updatePaths, "spec.tablet.count")
	}
	if !yandexYtsaurusClusterSpecTabletPlan.Preset.Equal(yandexYtsaurusClusterSpecTabletState.Preset) {
		updatePaths = append(updatePaths, "spec.tablet.preset")
	}
	if !plan.SubnetId.Equal(state.SubnetId) {
		updatePaths = append(updatePaths, "subnet_id")
	}
	if !plan.ZoneId.Equal(state.ZoneId) {
		updatePaths = append(updatePaths, "zone_id")
	}

	updateReq := &ytsaurus.UpdateClusterRequest{}
	id := plan.ID.ValueString()
	if !plan.ClusterId.IsUnknown() && !plan.ClusterId.IsNull() {
		id = plan.ClusterId.ValueString()
	}
	updateReq.SetClusterId(id)
	updateReq.SetName(plan.Name.ValueString())
	updateReq.SetDescription(plan.Description.ValueString())
	updateReq.SetLabels(expandYandexYtsaurusClusterLabels(ctx, plan.Labels, &diags))
	updateReq.SetSubnetId(plan.SubnetId.ValueString())
	updateReq.SetSecurityGroupIds(expandYandexYtsaurusClusterSecurityGroupIds(ctx, plan.SecurityGroupIds, &diags))
	updateReq.SetSpec(expandYandexYtsaurusClusterSpec(ctx, plan.Spec, &diags))
	updateReq.SetUpdateMask(&field_mask.FieldMask{Paths: updatePaths})

	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("Update cluster request: %s", validate.ProtoDump(updateReq)))

	md := new(metadata.MD)
	op, err := ytsaurusv1sdk.NewClusterClient(r.providerConfig.SDKv2).Update(ctx, updateReq, grpc.Header(md))
	if traceHeader := md.Get("x-server-trace-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Update cluster x-server-trace-id: %s", traceHeader[0]))
	}
	if traceHeader := md.Get("x-server-request-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Update cluster x-server-request-id: %s", traceHeader[0]))
	}
	if err != nil {
		resp.Diagnostics.AddError(
			"Failed to Read resource",
			"Error while requesting API to update cluster:"+err.Error(),
		)
		return
	}
	updateRes, err := op.Wait(ctx)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unable to Update Resource",
			fmt.Sprintf("An unexpected error occurred while waiting longrunning response. "+
				"Please retry the operation or report this issue to the provider developers.\n\n"+
				"Error: %s", err),
		)
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("Update cluster response: %s", validate.ProtoDump(updateRes)))

	plan.ClusterId = types.StringValue(updateRes.Id)

	reqApi := &ytsaurus.GetClusterRequest{}
	reqApi.SetClusterId(plan.ClusterId.ValueString())

	tflog.Debug(ctx, fmt.Sprintf("Read cluster request: %s", validate.ProtoDump(reqApi)))

	md = new(metadata.MD)
	res, err := ytsaurusv1sdk.NewClusterClient(r.providerConfig.SDKv2).Get(ctx, reqApi, grpc.Header(md))
	if traceHeader := md.Get("x-server-trace-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Read cluster x-server-trace-id: %s", traceHeader[0]))
	}
	if traceHeader := md.Get("x-server-request-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Read cluster x-server-request-id: %s", traceHeader[0]))
	}
	if err != nil {
		if validate.IsStatusWithCode(err, codes.NotFound) {
			resp.Diagnostics.AddWarning(
				"Failed to Read resource",
				"cluster not found",
			)
		} else {
			resp.Diagnostics.AddError(
				"Failed to Read resource",
				"Error while requesting API to get cluster:"+err.Error(),
			)
		}
	}

	tflog.Debug(ctx, fmt.Sprintf("Read cluster response: %s", validate.ProtoDump(res)))

	if resp.Diagnostics.HasError() {
		return
	}

	// diagnostics don't have errors and resource is nil => resource not found
	if res == nil {
		resp.Diagnostics.AddError("Failed to read", "Resource not found")
		return
	}

	newState := flattenYandexYtsaurusCluster(ctx, res, plan, state.Timeouts, &resp.Diagnostics)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &newState)...)
	if resp.Diagnostics.HasError() {
		return
	}
}
