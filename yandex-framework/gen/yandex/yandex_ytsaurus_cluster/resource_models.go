// Code generated by tfgen. DO NOT EDIT.

package yandex_ytsaurus_cluster

import (
	"context"
	"time"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	ytsaurus "github.com/yandex-cloud/go-genproto/yandex/cloud/ytsaurus/v1"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/converter"
)

type yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructModel struct {
	Locations types.List   `tfsdk:"locations"`
	SizeGb    types.Int64  `tfsdk:"size_gb"`
	Type      types.String `tfsdk:"type"`
}

var yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"locations": types.ListType{ElemType: types.StringType},
		"size_gb":   types.Int64Type,
		"type":      types.StringType,
	},
}

func flattenYandexYtsaurusClusterSpecComputeSpecStructDiskSpecStruct(ctx context.Context,
	yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStruct *ytsaurus.ComputeSpec_DiskSpec,
	diags *diag.Diagnostics) types.Object {
	if yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStruct == nil {
		return types.ObjectNull(yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructModelType.AttrTypes, yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructModel{
		Locations: flattenYandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructLocations(ctx, yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStruct.GetLocations(), diags),
		SizeGb:    types.Int64Value(int64(yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStruct.GetSizeGb())),
		Type:      types.StringValue(yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStruct.GetType()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexYtsaurusClusterSpecComputeSpecStructDiskSpecStruct(ctx context.Context, yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructState types.Object, diags *diag.Diagnostics) *ytsaurus.ComputeSpec_DiskSpec {
	if yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructState.IsNull() || yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructState.IsUnknown() {
		return nil
	}
	var yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStruct yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructModel
	diags.Append(yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructState.As(ctx, &yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStruct, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructModel(ctx, yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStruct, diags)
}

func expandYandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructModel(ctx context.Context, yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructState yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructModel, diags *diag.Diagnostics) *ytsaurus.ComputeSpec_DiskSpec {
	value := &ytsaurus.ComputeSpec_DiskSpec{}
	value.SetLocations(expandYandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructLocations(ctx, yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructState.Locations, diags))
	value.SetSizeGb((yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructState.SizeGb.ValueInt64()))
	value.SetType(yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructState.Type.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

func flattenYandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructLocations(ctx context.Context, yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructLocations []string, diags *diag.Diagnostics) types.List {
	if yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructLocations == nil {
		return types.ListNull(types.StringType)
	}
	var yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructLocationsValues []attr.Value
	for _, elem := range yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructLocations {
		val := types.StringValue(elem)
		yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructLocationsValues = append(yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructLocationsValues, val)
	}

	value, diag := types.ListValue(types.StringType, yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructLocationsValues)
	diags.Append(diag...)
	return value
}

func expandYandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructLocations(ctx context.Context, yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructLocationsState types.List, diags *diag.Diagnostics) []string {
	if yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructLocationsState.IsNull() || yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructLocationsState.IsUnknown() {
		return nil
	}
	if len(yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructLocationsState.Elements()) == 0 {
		return []string{}
	}
	yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructLocationsRes := make([]string, 0, len(yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructLocationsState.Elements()))
	yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructLocationsType := make([]types.String, 0, len(yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructLocationsState.Elements()))
	diags.Append(yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructLocationsState.ElementsAs(ctx, &yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructLocationsType, false)...)
	if diags.HasError() {
		return nil
	}
	for _, elem := range yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructLocationsType {
		yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructLocationsRes = append(yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructLocationsRes, elem.ValueString())
	}
	return yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructLocationsRes
}

type yandexYtsaurusClusterSpecComputeSpecStructModel struct {
	Disks       types.List   `tfsdk:"disks"`
	Preset      types.String `tfsdk:"preset"`
	ScalePolicy types.Object `tfsdk:"scale_policy"`
}

var yandexYtsaurusClusterSpecComputeSpecStructModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"disks":        types.ListType{ElemType: yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructModelType},
		"preset":       types.StringType,
		"scale_policy": yandexYtsaurusClusterSpecComputeSpecStructScalePolicyModelType,
	},
}

func flattenYandexYtsaurusClusterSpecComputeSpecStruct(ctx context.Context,
	yandexYtsaurusClusterSpecComputeSpecStruct *ytsaurus.ComputeSpec,
	diags *diag.Diagnostics) types.Object {
	if yandexYtsaurusClusterSpecComputeSpecStruct == nil {
		return types.ObjectNull(yandexYtsaurusClusterSpecComputeSpecStructModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexYtsaurusClusterSpecComputeSpecStructModelType.AttrTypes, yandexYtsaurusClusterSpecComputeSpecStructModel{
		Disks:       flattenYandexYtsaurusClusterSpecComputeSpecStructDisks(ctx, yandexYtsaurusClusterSpecComputeSpecStruct.GetDisks(), diags),
		Preset:      types.StringValue(yandexYtsaurusClusterSpecComputeSpecStruct.GetPreset()),
		ScalePolicy: flattenYandexYtsaurusClusterSpecComputeSpecStructScalePolicy(ctx, yandexYtsaurusClusterSpecComputeSpecStruct.GetScalePolicy(), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexYtsaurusClusterSpecComputeSpecStruct(ctx context.Context, yandexYtsaurusClusterSpecComputeSpecStructState types.Object, diags *diag.Diagnostics) *ytsaurus.ComputeSpec {
	if yandexYtsaurusClusterSpecComputeSpecStructState.IsNull() || yandexYtsaurusClusterSpecComputeSpecStructState.IsUnknown() {
		return nil
	}
	var yandexYtsaurusClusterSpecComputeSpecStruct yandexYtsaurusClusterSpecComputeSpecStructModel
	diags.Append(yandexYtsaurusClusterSpecComputeSpecStructState.As(ctx, &yandexYtsaurusClusterSpecComputeSpecStruct, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexYtsaurusClusterSpecComputeSpecStructModel(ctx, yandexYtsaurusClusterSpecComputeSpecStruct, diags)
}

func expandYandexYtsaurusClusterSpecComputeSpecStructModel(ctx context.Context, yandexYtsaurusClusterSpecComputeSpecStructState yandexYtsaurusClusterSpecComputeSpecStructModel, diags *diag.Diagnostics) *ytsaurus.ComputeSpec {
	value := &ytsaurus.ComputeSpec{}
	value.SetDisks(expandYandexYtsaurusClusterSpecComputeSpecStructDisks(ctx, yandexYtsaurusClusterSpecComputeSpecStructState.Disks, diags))
	value.SetPreset(yandexYtsaurusClusterSpecComputeSpecStructState.Preset.ValueString())
	value.SetScalePolicy(expandYandexYtsaurusClusterSpecComputeSpecStructScalePolicy(ctx, yandexYtsaurusClusterSpecComputeSpecStructState.ScalePolicy, diags))
	if diags.HasError() {
		return nil
	}
	return value
}

func flattenYandexYtsaurusClusterSpecComputeSpecStructDisks(ctx context.Context, yandexYtsaurusClusterSpecComputeSpecStructDisks []*ytsaurus.ComputeSpec_DiskSpec, diags *diag.Diagnostics) types.List {
	if yandexYtsaurusClusterSpecComputeSpecStructDisks == nil {
		return types.ListNull(yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructModelType)
	}
	var yandexYtsaurusClusterSpecComputeSpecStructDisksValues []attr.Value
	for _, elem := range yandexYtsaurusClusterSpecComputeSpecStructDisks {
		val := flattenYandexYtsaurusClusterSpecComputeSpecStructDiskSpecStruct(ctx, elem, diags)
		yandexYtsaurusClusterSpecComputeSpecStructDisksValues = append(yandexYtsaurusClusterSpecComputeSpecStructDisksValues, val)
	}

	value, diag := types.ListValue(yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructModelType, yandexYtsaurusClusterSpecComputeSpecStructDisksValues)
	diags.Append(diag...)
	return value
}

func expandYandexYtsaurusClusterSpecComputeSpecStructDisks(ctx context.Context, yandexYtsaurusClusterSpecComputeSpecStructDisksState types.List, diags *diag.Diagnostics) []*ytsaurus.ComputeSpec_DiskSpec {
	if yandexYtsaurusClusterSpecComputeSpecStructDisksState.IsNull() || yandexYtsaurusClusterSpecComputeSpecStructDisksState.IsUnknown() {
		return nil
	}
	if len(yandexYtsaurusClusterSpecComputeSpecStructDisksState.Elements()) == 0 {
		return []*ytsaurus.ComputeSpec_DiskSpec{}
	}
	yandexYtsaurusClusterSpecComputeSpecStructDisksRes := make([]*ytsaurus.ComputeSpec_DiskSpec, 0, len(yandexYtsaurusClusterSpecComputeSpecStructDisksState.Elements()))
	yandexYtsaurusClusterSpecComputeSpecStructDisksType := make([]yandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructModel, 0, len(yandexYtsaurusClusterSpecComputeSpecStructDisksState.Elements()))
	diags.Append(yandexYtsaurusClusterSpecComputeSpecStructDisksState.ElementsAs(ctx, &yandexYtsaurusClusterSpecComputeSpecStructDisksType, false)...)
	if diags.HasError() {
		return nil
	}
	for _, elem := range yandexYtsaurusClusterSpecComputeSpecStructDisksType {
		yandexYtsaurusClusterSpecComputeSpecStructDisksRes = append(yandexYtsaurusClusterSpecComputeSpecStructDisksRes, expandYandexYtsaurusClusterSpecComputeSpecStructDiskSpecStructModel(ctx, elem, diags))
	}
	return yandexYtsaurusClusterSpecComputeSpecStructDisksRes
}

type yandexYtsaurusClusterSpecComputeSpecStructScalePolicyModel struct {
	Auto  types.Object `tfsdk:"auto"`
	Fixed types.Object `tfsdk:"fixed"`
}

var yandexYtsaurusClusterSpecComputeSpecStructScalePolicyModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"auto":  yandexYtsaurusClusterSpecComputeSpecStructScalePolicyAutoModelType,
		"fixed": yandexYtsaurusClusterSpecComputeSpecStructScalePolicyFixedModelType,
	},
}

func flattenYandexYtsaurusClusterSpecComputeSpecStructScalePolicy(ctx context.Context,
	yandexYtsaurusClusterSpecComputeSpecStructScalePolicy *ytsaurus.ComputeSpec_ScalePolicy,
	diags *diag.Diagnostics) types.Object {
	if yandexYtsaurusClusterSpecComputeSpecStructScalePolicy == nil {
		return types.ObjectNull(yandexYtsaurusClusterSpecComputeSpecStructScalePolicyModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexYtsaurusClusterSpecComputeSpecStructScalePolicyModelType.AttrTypes, yandexYtsaurusClusterSpecComputeSpecStructScalePolicyModel{
		Auto:  flattenYandexYtsaurusClusterSpecComputeSpecStructScalePolicyAuto(ctx, yandexYtsaurusClusterSpecComputeSpecStructScalePolicy.GetAuto(), diags),
		Fixed: flattenYandexYtsaurusClusterSpecComputeSpecStructScalePolicyFixed(ctx, yandexYtsaurusClusterSpecComputeSpecStructScalePolicy.GetFixed(), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexYtsaurusClusterSpecComputeSpecStructScalePolicy(ctx context.Context, yandexYtsaurusClusterSpecComputeSpecStructScalePolicyState types.Object, diags *diag.Diagnostics) *ytsaurus.ComputeSpec_ScalePolicy {
	if yandexYtsaurusClusterSpecComputeSpecStructScalePolicyState.IsNull() || yandexYtsaurusClusterSpecComputeSpecStructScalePolicyState.IsUnknown() {
		return nil
	}
	var yandexYtsaurusClusterSpecComputeSpecStructScalePolicy yandexYtsaurusClusterSpecComputeSpecStructScalePolicyModel
	diags.Append(yandexYtsaurusClusterSpecComputeSpecStructScalePolicyState.As(ctx, &yandexYtsaurusClusterSpecComputeSpecStructScalePolicy, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexYtsaurusClusterSpecComputeSpecStructScalePolicyModel(ctx, yandexYtsaurusClusterSpecComputeSpecStructScalePolicy, diags)
}

func expandYandexYtsaurusClusterSpecComputeSpecStructScalePolicyModel(ctx context.Context, yandexYtsaurusClusterSpecComputeSpecStructScalePolicyState yandexYtsaurusClusterSpecComputeSpecStructScalePolicyModel, diags *diag.Diagnostics) *ytsaurus.ComputeSpec_ScalePolicy {
	value := &ytsaurus.ComputeSpec_ScalePolicy{}
	if !(yandexYtsaurusClusterSpecComputeSpecStructScalePolicyState.Auto.IsNull() || yandexYtsaurusClusterSpecComputeSpecStructScalePolicyState.Auto.IsUnknown() || yandexYtsaurusClusterSpecComputeSpecStructScalePolicyState.Auto.Equal(types.Object{})) {
		value.SetAuto(expandYandexYtsaurusClusterSpecComputeSpecStructScalePolicyAuto(ctx, yandexYtsaurusClusterSpecComputeSpecStructScalePolicyState.Auto, diags))
	}
	if !(yandexYtsaurusClusterSpecComputeSpecStructScalePolicyState.Fixed.IsNull() || yandexYtsaurusClusterSpecComputeSpecStructScalePolicyState.Fixed.IsUnknown() || yandexYtsaurusClusterSpecComputeSpecStructScalePolicyState.Fixed.Equal(types.Object{})) {
		value.SetFixed(expandYandexYtsaurusClusterSpecComputeSpecStructScalePolicyFixed(ctx, yandexYtsaurusClusterSpecComputeSpecStructScalePolicyState.Fixed, diags))
	}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexYtsaurusClusterSpecComputeSpecStructScalePolicyAutoModel struct {
	MaxSize types.Int64 `tfsdk:"max_size"`
	MinSize types.Int64 `tfsdk:"min_size"`
}

var yandexYtsaurusClusterSpecComputeSpecStructScalePolicyAutoModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"max_size": types.Int64Type,
		"min_size": types.Int64Type,
	},
}

func flattenYandexYtsaurusClusterSpecComputeSpecStructScalePolicyAuto(ctx context.Context,
	yandexYtsaurusClusterSpecComputeSpecStructScalePolicyAuto *ytsaurus.ComputeSpec_ScalePolicy_AutoScale,
	diags *diag.Diagnostics) types.Object {
	if yandexYtsaurusClusterSpecComputeSpecStructScalePolicyAuto == nil {
		return types.ObjectNull(yandexYtsaurusClusterSpecComputeSpecStructScalePolicyAutoModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexYtsaurusClusterSpecComputeSpecStructScalePolicyAutoModelType.AttrTypes, yandexYtsaurusClusterSpecComputeSpecStructScalePolicyAutoModel{
		MaxSize: types.Int64Value(int64(yandexYtsaurusClusterSpecComputeSpecStructScalePolicyAuto.GetMaxSize())),
		MinSize: types.Int64Value(int64(yandexYtsaurusClusterSpecComputeSpecStructScalePolicyAuto.GetMinSize())),
	})
	diags.Append(diag...)
	return value
}

func expandYandexYtsaurusClusterSpecComputeSpecStructScalePolicyAuto(ctx context.Context, yandexYtsaurusClusterSpecComputeSpecStructScalePolicyAutoState types.Object, diags *diag.Diagnostics) *ytsaurus.ComputeSpec_ScalePolicy_AutoScale {
	if yandexYtsaurusClusterSpecComputeSpecStructScalePolicyAutoState.IsNull() || yandexYtsaurusClusterSpecComputeSpecStructScalePolicyAutoState.IsUnknown() {
		return nil
	}
	var yandexYtsaurusClusterSpecComputeSpecStructScalePolicyAuto yandexYtsaurusClusterSpecComputeSpecStructScalePolicyAutoModel
	diags.Append(yandexYtsaurusClusterSpecComputeSpecStructScalePolicyAutoState.As(ctx, &yandexYtsaurusClusterSpecComputeSpecStructScalePolicyAuto, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexYtsaurusClusterSpecComputeSpecStructScalePolicyAutoModel(ctx, yandexYtsaurusClusterSpecComputeSpecStructScalePolicyAuto, diags)
}

func expandYandexYtsaurusClusterSpecComputeSpecStructScalePolicyAutoModel(ctx context.Context, yandexYtsaurusClusterSpecComputeSpecStructScalePolicyAutoState yandexYtsaurusClusterSpecComputeSpecStructScalePolicyAutoModel, diags *diag.Diagnostics) *ytsaurus.ComputeSpec_ScalePolicy_AutoScale {
	value := &ytsaurus.ComputeSpec_ScalePolicy_AutoScale{}
	value.SetMaxSize((yandexYtsaurusClusterSpecComputeSpecStructScalePolicyAutoState.MaxSize.ValueInt64()))
	value.SetMinSize((yandexYtsaurusClusterSpecComputeSpecStructScalePolicyAutoState.MinSize.ValueInt64()))
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexYtsaurusClusterSpecComputeSpecStructScalePolicyFixedModel struct {
	Size types.Int64 `tfsdk:"size"`
}

var yandexYtsaurusClusterSpecComputeSpecStructScalePolicyFixedModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"size": types.Int64Type,
	},
}

func flattenYandexYtsaurusClusterSpecComputeSpecStructScalePolicyFixed(ctx context.Context,
	yandexYtsaurusClusterSpecComputeSpecStructScalePolicyFixed *ytsaurus.ComputeSpec_ScalePolicy_FixedScale,
	diags *diag.Diagnostics) types.Object {
	if yandexYtsaurusClusterSpecComputeSpecStructScalePolicyFixed == nil {
		return types.ObjectNull(yandexYtsaurusClusterSpecComputeSpecStructScalePolicyFixedModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexYtsaurusClusterSpecComputeSpecStructScalePolicyFixedModelType.AttrTypes, yandexYtsaurusClusterSpecComputeSpecStructScalePolicyFixedModel{
		Size: types.Int64Value(int64(yandexYtsaurusClusterSpecComputeSpecStructScalePolicyFixed.GetSize())),
	})
	diags.Append(diag...)
	return value
}

func expandYandexYtsaurusClusterSpecComputeSpecStructScalePolicyFixed(ctx context.Context, yandexYtsaurusClusterSpecComputeSpecStructScalePolicyFixedState types.Object, diags *diag.Diagnostics) *ytsaurus.ComputeSpec_ScalePolicy_FixedScale {
	if yandexYtsaurusClusterSpecComputeSpecStructScalePolicyFixedState.IsNull() || yandexYtsaurusClusterSpecComputeSpecStructScalePolicyFixedState.IsUnknown() {
		return nil
	}
	var yandexYtsaurusClusterSpecComputeSpecStructScalePolicyFixed yandexYtsaurusClusterSpecComputeSpecStructScalePolicyFixedModel
	diags.Append(yandexYtsaurusClusterSpecComputeSpecStructScalePolicyFixedState.As(ctx, &yandexYtsaurusClusterSpecComputeSpecStructScalePolicyFixed, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexYtsaurusClusterSpecComputeSpecStructScalePolicyFixedModel(ctx, yandexYtsaurusClusterSpecComputeSpecStructScalePolicyFixed, diags)
}

func expandYandexYtsaurusClusterSpecComputeSpecStructScalePolicyFixedModel(ctx context.Context, yandexYtsaurusClusterSpecComputeSpecStructScalePolicyFixedState yandexYtsaurusClusterSpecComputeSpecStructScalePolicyFixedModel, diags *diag.Diagnostics) *ytsaurus.ComputeSpec_ScalePolicy_FixedScale {
	value := &ytsaurus.ComputeSpec_ScalePolicy_FixedScale{}
	value.SetSize((yandexYtsaurusClusterSpecComputeSpecStructScalePolicyFixedState.Size.ValueInt64()))
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexYtsaurusClusterModel struct {
	ClusterId        types.String   `tfsdk:"cluster_id"`
	ID               types.String   `tfsdk:"id"`
	CreatedAt        types.String   `tfsdk:"created_at"`
	CreatedBy        types.String   `tfsdk:"created_by"`
	Description      types.String   `tfsdk:"description"`
	Endpoints        types.Object   `tfsdk:"endpoints"`
	FolderId         types.String   `tfsdk:"folder_id"`
	Health           types.String   `tfsdk:"health"`
	Labels           types.Map      `tfsdk:"labels"`
	Name             types.String   `tfsdk:"name"`
	SecurityGroupIds types.List     `tfsdk:"security_group_ids"`
	Spec             types.Object   `tfsdk:"spec"`
	Status           types.String   `tfsdk:"status"`
	SubnetId         types.String   `tfsdk:"subnet_id"`
	UpdatedAt        types.String   `tfsdk:"updated_at"`
	UpdatedBy        types.String   `tfsdk:"updated_by"`
	ZoneId           types.String   `tfsdk:"zone_id"`
	Timeouts         timeouts.Value `tfsdk:"timeouts"`
}

var yandexYtsaurusClusterModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"cluster_id":         types.StringType,
		"id":                 types.StringType,
		"created_at":         types.StringType,
		"created_by":         types.StringType,
		"description":        types.StringType,
		"endpoints":          yandexYtsaurusClusterEndpointsModelType,
		"folder_id":          types.StringType,
		"health":             types.StringType,
		"labels":             types.MapType{ElemType: types.StringType},
		"name":               types.StringType,
		"security_group_ids": types.ListType{ElemType: types.StringType},
		"spec":               yandexYtsaurusClusterSpecModelType,
		"status":             types.StringType,
		"subnet_id":          types.StringType,
		"updated_at":         types.StringType,
		"updated_by":         types.StringType,
		"zone_id":            types.StringType,
		"timeouts":           timeouts.AttributesAll(context.Background()).GetType(),
	},
}

func flattenYandexYtsaurusCluster(ctx context.Context,
	yandexYtsaurusCluster *ytsaurus.Cluster,
	state yandexYtsaurusClusterModel,
	to timeouts.Value,
	diags *diag.Diagnostics) types.Object {
	if yandexYtsaurusCluster == nil {
		return types.ObjectNull(yandexYtsaurusClusterModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexYtsaurusClusterModelType.AttrTypes, yandexYtsaurusClusterModel{
		ClusterId:        types.StringValue(yandexYtsaurusCluster.GetId()),
		ID:               types.StringValue(yandexYtsaurusCluster.GetId()),
		CreatedAt:        types.StringValue(yandexYtsaurusCluster.GetCreatedAt().AsTime().Format(time.RFC3339)),
		CreatedBy:        types.StringValue(yandexYtsaurusCluster.GetCreatedBy()),
		Description:      types.StringValue(yandexYtsaurusCluster.GetDescription()),
		Endpoints:        flattenYandexYtsaurusClusterEndpoints(ctx, yandexYtsaurusCluster.GetEndpoints(), diags),
		FolderId:         types.StringValue(yandexYtsaurusCluster.GetFolderId()),
		Health:           types.StringValue(yandexYtsaurusCluster.GetHealth().String()),
		Labels:           flattenYandexYtsaurusClusterLabels(ctx, yandexYtsaurusCluster.GetLabels(), diags),
		Name:             types.StringValue(yandexYtsaurusCluster.GetName()),
		SecurityGroupIds: flattenYandexYtsaurusClusterSecurityGroupIds(ctx, yandexYtsaurusCluster.GetSecurityGroupIds(), diags),
		Spec:             flattenYandexYtsaurusClusterSpec(ctx, yandexYtsaurusCluster.GetSpec(), diags),
		Status:           types.StringValue(yandexYtsaurusCluster.GetStatus().String()),
		SubnetId:         types.StringValue(yandexYtsaurusCluster.GetSubnetId()),
		UpdatedAt:        types.StringValue(yandexYtsaurusCluster.GetUpdatedAt().AsTime().Format(time.RFC3339)),
		UpdatedBy:        types.StringValue(yandexYtsaurusCluster.GetUpdatedBy()),
		ZoneId:           types.StringValue(yandexYtsaurusCluster.GetZoneId()),
		Timeouts:         to,
	})
	diags.Append(diag...)
	return value
}

func expandYandexYtsaurusCluster(ctx context.Context, yandexYtsaurusClusterState types.Object, diags *diag.Diagnostics) *ytsaurus.Cluster {
	if yandexYtsaurusClusterState.IsNull() || yandexYtsaurusClusterState.IsUnknown() {
		return nil
	}
	var yandexYtsaurusCluster yandexYtsaurusClusterModel
	diags.Append(yandexYtsaurusClusterState.As(ctx, &yandexYtsaurusCluster, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexYtsaurusClusterModel(ctx, yandexYtsaurusCluster, diags)
}

func expandYandexYtsaurusClusterModel(ctx context.Context, yandexYtsaurusClusterState yandexYtsaurusClusterModel, diags *diag.Diagnostics) *ytsaurus.Cluster {
	value := &ytsaurus.Cluster{}
	value.SetId(yandexYtsaurusClusterState.ClusterId.ValueString())
	value.SetId(yandexYtsaurusClusterState.ClusterId.ValueString())
	value.SetCreatedAt(converter.ParseTimestamp(yandexYtsaurusClusterState.CreatedAt.ValueString(), diags))
	value.SetCreatedBy(yandexYtsaurusClusterState.CreatedBy.ValueString())
	value.SetDescription(yandexYtsaurusClusterState.Description.ValueString())
	value.SetEndpoints(expandYandexYtsaurusClusterEndpoints(ctx, yandexYtsaurusClusterState.Endpoints, diags))
	value.SetFolderId(yandexYtsaurusClusterState.FolderId.ValueString())
	value.SetHealth(ytsaurus.Cluster_Health(ytsaurus.Cluster_Health_value[yandexYtsaurusClusterState.Health.ValueString()]))
	value.SetLabels(expandYandexYtsaurusClusterLabels(ctx, yandexYtsaurusClusterState.Labels, diags))
	value.SetName(yandexYtsaurusClusterState.Name.ValueString())
	value.SetSecurityGroupIds(expandYandexYtsaurusClusterSecurityGroupIds(ctx, yandexYtsaurusClusterState.SecurityGroupIds, diags))
	value.SetSpec(expandYandexYtsaurusClusterSpec(ctx, yandexYtsaurusClusterState.Spec, diags))
	value.SetStatus(ytsaurus.Cluster_Status(ytsaurus.Cluster_Status_value[yandexYtsaurusClusterState.Status.ValueString()]))
	value.SetSubnetId(yandexYtsaurusClusterState.SubnetId.ValueString())
	value.SetUpdatedAt(converter.ParseTimestamp(yandexYtsaurusClusterState.UpdatedAt.ValueString(), diags))
	value.SetUpdatedBy(yandexYtsaurusClusterState.UpdatedBy.ValueString())
	value.SetZoneId(yandexYtsaurusClusterState.ZoneId.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexYtsaurusClusterEndpointsModel struct {
	ExternalHttpProxyBalancer types.String `tfsdk:"external_http_proxy_balancer"`
	InternalHttpProxies       types.List   `tfsdk:"internal_http_proxies"`
	InternalHttpProxyAlias    types.String `tfsdk:"internal_http_proxy_alias"`
	InternalRpcProxies        types.List   `tfsdk:"internal_rpc_proxies"`
	InternalRpcProxyAlias     types.String `tfsdk:"internal_rpc_proxy_alias"`
	Ui                        types.String `tfsdk:"ui"`
}

var yandexYtsaurusClusterEndpointsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"external_http_proxy_balancer": types.StringType,
		"internal_http_proxies":        types.ListType{ElemType: types.StringType},
		"internal_http_proxy_alias":    types.StringType,
		"internal_rpc_proxies":         types.ListType{ElemType: types.StringType},
		"internal_rpc_proxy_alias":     types.StringType,
		"ui":                           types.StringType,
	},
}

func flattenYandexYtsaurusClusterEndpoints(ctx context.Context,
	yandexYtsaurusClusterEndpoints *ytsaurus.Cluster_Endpoints,
	diags *diag.Diagnostics) types.Object {
	if yandexYtsaurusClusterEndpoints == nil {
		return types.ObjectNull(yandexYtsaurusClusterEndpointsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexYtsaurusClusterEndpointsModelType.AttrTypes, yandexYtsaurusClusterEndpointsModel{
		ExternalHttpProxyBalancer: types.StringValue(yandexYtsaurusClusterEndpoints.GetExternalHttpProxyBalancer()),
		InternalHttpProxies:       flattenYandexYtsaurusClusterEndpointsInternalHttpProxies(ctx, yandexYtsaurusClusterEndpoints.GetInternalHttpProxies(), diags),
		InternalHttpProxyAlias:    types.StringValue(yandexYtsaurusClusterEndpoints.GetInternalHttpProxyAlias()),
		InternalRpcProxies:        flattenYandexYtsaurusClusterEndpointsInternalRpcProxies(ctx, yandexYtsaurusClusterEndpoints.GetInternalRpcProxies(), diags),
		InternalRpcProxyAlias:     types.StringValue(yandexYtsaurusClusterEndpoints.GetInternalRpcProxyAlias()),
		Ui:                        types.StringValue(yandexYtsaurusClusterEndpoints.GetUi()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexYtsaurusClusterEndpoints(ctx context.Context, yandexYtsaurusClusterEndpointsState types.Object, diags *diag.Diagnostics) *ytsaurus.Cluster_Endpoints {
	if yandexYtsaurusClusterEndpointsState.IsNull() || yandexYtsaurusClusterEndpointsState.IsUnknown() {
		return nil
	}
	var yandexYtsaurusClusterEndpoints yandexYtsaurusClusterEndpointsModel
	diags.Append(yandexYtsaurusClusterEndpointsState.As(ctx, &yandexYtsaurusClusterEndpoints, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexYtsaurusClusterEndpointsModel(ctx, yandexYtsaurusClusterEndpoints, diags)
}

func expandYandexYtsaurusClusterEndpointsModel(ctx context.Context, yandexYtsaurusClusterEndpointsState yandexYtsaurusClusterEndpointsModel, diags *diag.Diagnostics) *ytsaurus.Cluster_Endpoints {
	value := &ytsaurus.Cluster_Endpoints{}
	value.SetExternalHttpProxyBalancer(yandexYtsaurusClusterEndpointsState.ExternalHttpProxyBalancer.ValueString())
	value.SetInternalHttpProxies(expandYandexYtsaurusClusterEndpointsInternalHttpProxies(ctx, yandexYtsaurusClusterEndpointsState.InternalHttpProxies, diags))
	value.SetInternalHttpProxyAlias(yandexYtsaurusClusterEndpointsState.InternalHttpProxyAlias.ValueString())
	value.SetInternalRpcProxies(expandYandexYtsaurusClusterEndpointsInternalRpcProxies(ctx, yandexYtsaurusClusterEndpointsState.InternalRpcProxies, diags))
	value.SetInternalRpcProxyAlias(yandexYtsaurusClusterEndpointsState.InternalRpcProxyAlias.ValueString())
	value.SetUi(yandexYtsaurusClusterEndpointsState.Ui.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

func flattenYandexYtsaurusClusterEndpointsInternalHttpProxies(ctx context.Context, yandexYtsaurusClusterEndpointsInternalHttpProxies []string, diags *diag.Diagnostics) types.List {
	if yandexYtsaurusClusterEndpointsInternalHttpProxies == nil {
		return types.ListNull(types.StringType)
	}
	var yandexYtsaurusClusterEndpointsInternalHttpProxiesValues []attr.Value
	for _, elem := range yandexYtsaurusClusterEndpointsInternalHttpProxies {
		val := types.StringValue(elem)
		yandexYtsaurusClusterEndpointsInternalHttpProxiesValues = append(yandexYtsaurusClusterEndpointsInternalHttpProxiesValues, val)
	}

	value, diag := types.ListValue(types.StringType, yandexYtsaurusClusterEndpointsInternalHttpProxiesValues)
	diags.Append(diag...)
	return value
}

func expandYandexYtsaurusClusterEndpointsInternalHttpProxies(ctx context.Context, yandexYtsaurusClusterEndpointsInternalHttpProxiesState types.List, diags *diag.Diagnostics) []string {
	if yandexYtsaurusClusterEndpointsInternalHttpProxiesState.IsNull() || yandexYtsaurusClusterEndpointsInternalHttpProxiesState.IsUnknown() {
		return nil
	}
	if len(yandexYtsaurusClusterEndpointsInternalHttpProxiesState.Elements()) == 0 {
		return []string{}
	}
	yandexYtsaurusClusterEndpointsInternalHttpProxiesRes := make([]string, 0, len(yandexYtsaurusClusterEndpointsInternalHttpProxiesState.Elements()))
	yandexYtsaurusClusterEndpointsInternalHttpProxiesType := make([]types.String, 0, len(yandexYtsaurusClusterEndpointsInternalHttpProxiesState.Elements()))
	diags.Append(yandexYtsaurusClusterEndpointsInternalHttpProxiesState.ElementsAs(ctx, &yandexYtsaurusClusterEndpointsInternalHttpProxiesType, false)...)
	if diags.HasError() {
		return nil
	}
	for _, elem := range yandexYtsaurusClusterEndpointsInternalHttpProxiesType {
		yandexYtsaurusClusterEndpointsInternalHttpProxiesRes = append(yandexYtsaurusClusterEndpointsInternalHttpProxiesRes, elem.ValueString())
	}
	return yandexYtsaurusClusterEndpointsInternalHttpProxiesRes
}

func flattenYandexYtsaurusClusterEndpointsInternalRpcProxies(ctx context.Context, yandexYtsaurusClusterEndpointsInternalRpcProxies []string, diags *diag.Diagnostics) types.List {
	if yandexYtsaurusClusterEndpointsInternalRpcProxies == nil {
		return types.ListNull(types.StringType)
	}
	var yandexYtsaurusClusterEndpointsInternalRpcProxiesValues []attr.Value
	for _, elem := range yandexYtsaurusClusterEndpointsInternalRpcProxies {
		val := types.StringValue(elem)
		yandexYtsaurusClusterEndpointsInternalRpcProxiesValues = append(yandexYtsaurusClusterEndpointsInternalRpcProxiesValues, val)
	}

	value, diag := types.ListValue(types.StringType, yandexYtsaurusClusterEndpointsInternalRpcProxiesValues)
	diags.Append(diag...)
	return value
}

func expandYandexYtsaurusClusterEndpointsInternalRpcProxies(ctx context.Context, yandexYtsaurusClusterEndpointsInternalRpcProxiesState types.List, diags *diag.Diagnostics) []string {
	if yandexYtsaurusClusterEndpointsInternalRpcProxiesState.IsNull() || yandexYtsaurusClusterEndpointsInternalRpcProxiesState.IsUnknown() {
		return nil
	}
	if len(yandexYtsaurusClusterEndpointsInternalRpcProxiesState.Elements()) == 0 {
		return []string{}
	}
	yandexYtsaurusClusterEndpointsInternalRpcProxiesRes := make([]string, 0, len(yandexYtsaurusClusterEndpointsInternalRpcProxiesState.Elements()))
	yandexYtsaurusClusterEndpointsInternalRpcProxiesType := make([]types.String, 0, len(yandexYtsaurusClusterEndpointsInternalRpcProxiesState.Elements()))
	diags.Append(yandexYtsaurusClusterEndpointsInternalRpcProxiesState.ElementsAs(ctx, &yandexYtsaurusClusterEndpointsInternalRpcProxiesType, false)...)
	if diags.HasError() {
		return nil
	}
	for _, elem := range yandexYtsaurusClusterEndpointsInternalRpcProxiesType {
		yandexYtsaurusClusterEndpointsInternalRpcProxiesRes = append(yandexYtsaurusClusterEndpointsInternalRpcProxiesRes, elem.ValueString())
	}
	return yandexYtsaurusClusterEndpointsInternalRpcProxiesRes
}

func flattenYandexYtsaurusClusterLabels(ctx context.Context, yandexYtsaurusClusterLabels map[string]string, diags *diag.Diagnostics) types.Map {
	if yandexYtsaurusClusterLabels == nil {
		return types.MapNull(types.StringType)
	}
	yandexYtsaurusClusterLabelsValues := make(map[string]attr.Value)
	for k, elem := range yandexYtsaurusClusterLabels {
		val := types.StringValue(elem)
		yandexYtsaurusClusterLabelsValues[k] = val
	}

	value, diag := types.MapValue(types.StringType, yandexYtsaurusClusterLabelsValues)
	diags.Append(diag...)
	return value
}

func expandYandexYtsaurusClusterLabels(ctx context.Context, yandexYtsaurusClusterLabelsState types.Map, diags *diag.Diagnostics) map[string]string {
	if yandexYtsaurusClusterLabelsState.IsNull() || yandexYtsaurusClusterLabelsState.IsUnknown() {
		return nil
	}
	if len(yandexYtsaurusClusterLabelsState.Elements()) == 0 {
		return map[string]string{}
	}
	yandexYtsaurusClusterLabelsRes := make(map[string]string)
	yandexYtsaurusClusterLabelsType := make(map[string]types.String)
	diags.Append(yandexYtsaurusClusterLabelsState.ElementsAs(ctx, &yandexYtsaurusClusterLabelsType, false)...)
	if diags.HasError() {
		return nil
	}
	for k, elem := range yandexYtsaurusClusterLabelsType {
		yandexYtsaurusClusterLabelsRes[k] = elem.ValueString()
	}
	return yandexYtsaurusClusterLabelsRes
}

func flattenYandexYtsaurusClusterSecurityGroupIds(ctx context.Context, yandexYtsaurusClusterSecurityGroupIds []string, diags *diag.Diagnostics) types.List {
	if yandexYtsaurusClusterSecurityGroupIds == nil {
		return types.ListNull(types.StringType)
	}
	var yandexYtsaurusClusterSecurityGroupIdsValues []attr.Value
	for _, elem := range yandexYtsaurusClusterSecurityGroupIds {
		val := types.StringValue(elem)
		yandexYtsaurusClusterSecurityGroupIdsValues = append(yandexYtsaurusClusterSecurityGroupIdsValues, val)
	}

	value, diag := types.ListValue(types.StringType, yandexYtsaurusClusterSecurityGroupIdsValues)
	diags.Append(diag...)
	return value
}

func expandYandexYtsaurusClusterSecurityGroupIds(ctx context.Context, yandexYtsaurusClusterSecurityGroupIdsState types.List, diags *diag.Diagnostics) []string {
	if yandexYtsaurusClusterSecurityGroupIdsState.IsNull() || yandexYtsaurusClusterSecurityGroupIdsState.IsUnknown() {
		return nil
	}
	if len(yandexYtsaurusClusterSecurityGroupIdsState.Elements()) == 0 {
		return []string{}
	}
	yandexYtsaurusClusterSecurityGroupIdsRes := make([]string, 0, len(yandexYtsaurusClusterSecurityGroupIdsState.Elements()))
	yandexYtsaurusClusterSecurityGroupIdsType := make([]types.String, 0, len(yandexYtsaurusClusterSecurityGroupIdsState.Elements()))
	diags.Append(yandexYtsaurusClusterSecurityGroupIdsState.ElementsAs(ctx, &yandexYtsaurusClusterSecurityGroupIdsType, false)...)
	if diags.HasError() {
		return nil
	}
	for _, elem := range yandexYtsaurusClusterSecurityGroupIdsType {
		yandexYtsaurusClusterSecurityGroupIdsRes = append(yandexYtsaurusClusterSecurityGroupIdsRes, elem.ValueString())
	}
	return yandexYtsaurusClusterSecurityGroupIdsRes
}

type yandexYtsaurusClusterSpecModel struct {
	Compute types.List   `tfsdk:"compute"`
	Proxy   types.Object `tfsdk:"proxy"`
	Storage types.Object `tfsdk:"storage"`
	Tablet  types.Object `tfsdk:"tablet"`
}

var yandexYtsaurusClusterSpecModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"compute": types.ListType{ElemType: yandexYtsaurusClusterSpecComputeSpecStructModelType},
		"proxy":   yandexYtsaurusClusterSpecProxyModelType,
		"storage": yandexYtsaurusClusterSpecStorageModelType,
		"tablet":  yandexYtsaurusClusterSpecTabletModelType,
	},
}

func flattenYandexYtsaurusClusterSpec(ctx context.Context,
	yandexYtsaurusClusterSpec *ytsaurus.ClusterSpec,
	diags *diag.Diagnostics) types.Object {
	if yandexYtsaurusClusterSpec == nil {
		return types.ObjectNull(yandexYtsaurusClusterSpecModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexYtsaurusClusterSpecModelType.AttrTypes, yandexYtsaurusClusterSpecModel{
		Compute: flattenYandexYtsaurusClusterSpecCompute(ctx, yandexYtsaurusClusterSpec.GetCompute(), diags),
		Proxy:   flattenYandexYtsaurusClusterSpecProxy(ctx, yandexYtsaurusClusterSpec.GetProxy(), diags),
		Storage: flattenYandexYtsaurusClusterSpecStorage(ctx, yandexYtsaurusClusterSpec.GetStorage(), diags),
		Tablet:  flattenYandexYtsaurusClusterSpecTablet(ctx, yandexYtsaurusClusterSpec.GetTablet(), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexYtsaurusClusterSpec(ctx context.Context, yandexYtsaurusClusterSpecState types.Object, diags *diag.Diagnostics) *ytsaurus.ClusterSpec {
	if yandexYtsaurusClusterSpecState.IsNull() || yandexYtsaurusClusterSpecState.IsUnknown() {
		return nil
	}
	var yandexYtsaurusClusterSpec yandexYtsaurusClusterSpecModel
	diags.Append(yandexYtsaurusClusterSpecState.As(ctx, &yandexYtsaurusClusterSpec, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexYtsaurusClusterSpecModel(ctx, yandexYtsaurusClusterSpec, diags)
}

func expandYandexYtsaurusClusterSpecModel(ctx context.Context, yandexYtsaurusClusterSpecState yandexYtsaurusClusterSpecModel, diags *diag.Diagnostics) *ytsaurus.ClusterSpec {
	value := &ytsaurus.ClusterSpec{}
	value.SetCompute(expandYandexYtsaurusClusterSpecCompute(ctx, yandexYtsaurusClusterSpecState.Compute, diags))
	value.SetProxy(expandYandexYtsaurusClusterSpecProxy(ctx, yandexYtsaurusClusterSpecState.Proxy, diags))
	value.SetStorage(expandYandexYtsaurusClusterSpecStorage(ctx, yandexYtsaurusClusterSpecState.Storage, diags))
	value.SetTablet(expandYandexYtsaurusClusterSpecTablet(ctx, yandexYtsaurusClusterSpecState.Tablet, diags))
	if diags.HasError() {
		return nil
	}
	return value
}

func flattenYandexYtsaurusClusterSpecCompute(ctx context.Context, yandexYtsaurusClusterSpecCompute []*ytsaurus.ComputeSpec, diags *diag.Diagnostics) types.List {
	if yandexYtsaurusClusterSpecCompute == nil {
		return types.ListNull(yandexYtsaurusClusterSpecComputeSpecStructModelType)
	}
	var yandexYtsaurusClusterSpecComputeValues []attr.Value
	for _, elem := range yandexYtsaurusClusterSpecCompute {
		val := flattenYandexYtsaurusClusterSpecComputeSpecStruct(ctx, elem, diags)
		yandexYtsaurusClusterSpecComputeValues = append(yandexYtsaurusClusterSpecComputeValues, val)
	}

	value, diag := types.ListValue(yandexYtsaurusClusterSpecComputeSpecStructModelType, yandexYtsaurusClusterSpecComputeValues)
	diags.Append(diag...)
	return value
}

func expandYandexYtsaurusClusterSpecCompute(ctx context.Context, yandexYtsaurusClusterSpecComputeState types.List, diags *diag.Diagnostics) []*ytsaurus.ComputeSpec {
	if yandexYtsaurusClusterSpecComputeState.IsNull() || yandexYtsaurusClusterSpecComputeState.IsUnknown() {
		return nil
	}
	if len(yandexYtsaurusClusterSpecComputeState.Elements()) == 0 {
		return []*ytsaurus.ComputeSpec{}
	}
	yandexYtsaurusClusterSpecComputeRes := make([]*ytsaurus.ComputeSpec, 0, len(yandexYtsaurusClusterSpecComputeState.Elements()))
	yandexYtsaurusClusterSpecComputeType := make([]yandexYtsaurusClusterSpecComputeSpecStructModel, 0, len(yandexYtsaurusClusterSpecComputeState.Elements()))
	diags.Append(yandexYtsaurusClusterSpecComputeState.ElementsAs(ctx, &yandexYtsaurusClusterSpecComputeType, false)...)
	if diags.HasError() {
		return nil
	}
	for _, elem := range yandexYtsaurusClusterSpecComputeType {
		yandexYtsaurusClusterSpecComputeRes = append(yandexYtsaurusClusterSpecComputeRes, expandYandexYtsaurusClusterSpecComputeSpecStructModel(ctx, elem, diags))
	}
	return yandexYtsaurusClusterSpecComputeRes
}

type yandexYtsaurusClusterSpecProxyModel struct {
	Http types.Object `tfsdk:"http"`
	Rpc  types.Object `tfsdk:"rpc"`
}

var yandexYtsaurusClusterSpecProxyModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"http": yandexYtsaurusClusterSpecProxyHttpModelType,
		"rpc":  yandexYtsaurusClusterSpecProxyRpcModelType,
	},
}

func flattenYandexYtsaurusClusterSpecProxy(ctx context.Context,
	yandexYtsaurusClusterSpecProxy *ytsaurus.ProxySpec,
	diags *diag.Diagnostics) types.Object {
	if yandexYtsaurusClusterSpecProxy == nil {
		return types.ObjectNull(yandexYtsaurusClusterSpecProxyModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexYtsaurusClusterSpecProxyModelType.AttrTypes, yandexYtsaurusClusterSpecProxyModel{
		Http: flattenYandexYtsaurusClusterSpecProxyHttp(ctx, yandexYtsaurusClusterSpecProxy.GetHttp(), diags),
		Rpc:  flattenYandexYtsaurusClusterSpecProxyRpc(ctx, yandexYtsaurusClusterSpecProxy.GetRpc(), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexYtsaurusClusterSpecProxy(ctx context.Context, yandexYtsaurusClusterSpecProxyState types.Object, diags *diag.Diagnostics) *ytsaurus.ProxySpec {
	if yandexYtsaurusClusterSpecProxyState.IsNull() || yandexYtsaurusClusterSpecProxyState.IsUnknown() {
		return nil
	}
	var yandexYtsaurusClusterSpecProxy yandexYtsaurusClusterSpecProxyModel
	diags.Append(yandexYtsaurusClusterSpecProxyState.As(ctx, &yandexYtsaurusClusterSpecProxy, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexYtsaurusClusterSpecProxyModel(ctx, yandexYtsaurusClusterSpecProxy, diags)
}

func expandYandexYtsaurusClusterSpecProxyModel(ctx context.Context, yandexYtsaurusClusterSpecProxyState yandexYtsaurusClusterSpecProxyModel, diags *diag.Diagnostics) *ytsaurus.ProxySpec {
	value := &ytsaurus.ProxySpec{}
	value.SetHttp(expandYandexYtsaurusClusterSpecProxyHttp(ctx, yandexYtsaurusClusterSpecProxyState.Http, diags))
	value.SetRpc(expandYandexYtsaurusClusterSpecProxyRpc(ctx, yandexYtsaurusClusterSpecProxyState.Rpc, diags))
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexYtsaurusClusterSpecProxyHttpModel struct {
	Count types.Int64 `tfsdk:"count"`
}

var yandexYtsaurusClusterSpecProxyHttpModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"count": types.Int64Type,
	},
}

func flattenYandexYtsaurusClusterSpecProxyHttp(ctx context.Context,
	yandexYtsaurusClusterSpecProxyHttp *ytsaurus.HttpProxySpec,
	diags *diag.Diagnostics) types.Object {
	if yandexYtsaurusClusterSpecProxyHttp == nil {
		return types.ObjectNull(yandexYtsaurusClusterSpecProxyHttpModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexYtsaurusClusterSpecProxyHttpModelType.AttrTypes, yandexYtsaurusClusterSpecProxyHttpModel{
		Count: types.Int64Value(int64(yandexYtsaurusClusterSpecProxyHttp.GetCount())),
	})
	diags.Append(diag...)
	return value
}

func expandYandexYtsaurusClusterSpecProxyHttp(ctx context.Context, yandexYtsaurusClusterSpecProxyHttpState types.Object, diags *diag.Diagnostics) *ytsaurus.HttpProxySpec {
	if yandexYtsaurusClusterSpecProxyHttpState.IsNull() || yandexYtsaurusClusterSpecProxyHttpState.IsUnknown() {
		return nil
	}
	var yandexYtsaurusClusterSpecProxyHttp yandexYtsaurusClusterSpecProxyHttpModel
	diags.Append(yandexYtsaurusClusterSpecProxyHttpState.As(ctx, &yandexYtsaurusClusterSpecProxyHttp, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexYtsaurusClusterSpecProxyHttpModel(ctx, yandexYtsaurusClusterSpecProxyHttp, diags)
}

func expandYandexYtsaurusClusterSpecProxyHttpModel(ctx context.Context, yandexYtsaurusClusterSpecProxyHttpState yandexYtsaurusClusterSpecProxyHttpModel, diags *diag.Diagnostics) *ytsaurus.HttpProxySpec {
	value := &ytsaurus.HttpProxySpec{}
	value.SetCount((yandexYtsaurusClusterSpecProxyHttpState.Count.ValueInt64()))
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexYtsaurusClusterSpecProxyRpcModel struct {
	Count types.Int64 `tfsdk:"count"`
}

var yandexYtsaurusClusterSpecProxyRpcModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"count": types.Int64Type,
	},
}

func flattenYandexYtsaurusClusterSpecProxyRpc(ctx context.Context,
	yandexYtsaurusClusterSpecProxyRpc *ytsaurus.RpcProxySpec,
	diags *diag.Diagnostics) types.Object {
	if yandexYtsaurusClusterSpecProxyRpc == nil {
		return types.ObjectNull(yandexYtsaurusClusterSpecProxyRpcModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexYtsaurusClusterSpecProxyRpcModelType.AttrTypes, yandexYtsaurusClusterSpecProxyRpcModel{
		Count: types.Int64Value(int64(yandexYtsaurusClusterSpecProxyRpc.GetCount())),
	})
	diags.Append(diag...)
	return value
}

func expandYandexYtsaurusClusterSpecProxyRpc(ctx context.Context, yandexYtsaurusClusterSpecProxyRpcState types.Object, diags *diag.Diagnostics) *ytsaurus.RpcProxySpec {
	if yandexYtsaurusClusterSpecProxyRpcState.IsNull() || yandexYtsaurusClusterSpecProxyRpcState.IsUnknown() {
		return nil
	}
	var yandexYtsaurusClusterSpecProxyRpc yandexYtsaurusClusterSpecProxyRpcModel
	diags.Append(yandexYtsaurusClusterSpecProxyRpcState.As(ctx, &yandexYtsaurusClusterSpecProxyRpc, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexYtsaurusClusterSpecProxyRpcModel(ctx, yandexYtsaurusClusterSpecProxyRpc, diags)
}

func expandYandexYtsaurusClusterSpecProxyRpcModel(ctx context.Context, yandexYtsaurusClusterSpecProxyRpcState yandexYtsaurusClusterSpecProxyRpcModel, diags *diag.Diagnostics) *ytsaurus.RpcProxySpec {
	value := &ytsaurus.RpcProxySpec{}
	value.SetCount((yandexYtsaurusClusterSpecProxyRpcState.Count.ValueInt64()))
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexYtsaurusClusterSpecStorageModel struct {
	Hdd types.Object `tfsdk:"hdd"`
	Ssd types.Object `tfsdk:"ssd"`
}

var yandexYtsaurusClusterSpecStorageModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"hdd": yandexYtsaurusClusterSpecStorageHddModelType,
		"ssd": yandexYtsaurusClusterSpecStorageSsdModelType,
	},
}

func flattenYandexYtsaurusClusterSpecStorage(ctx context.Context,
	yandexYtsaurusClusterSpecStorage *ytsaurus.StorageSpec,
	diags *diag.Diagnostics) types.Object {
	if yandexYtsaurusClusterSpecStorage == nil {
		return types.ObjectNull(yandexYtsaurusClusterSpecStorageModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexYtsaurusClusterSpecStorageModelType.AttrTypes, yandexYtsaurusClusterSpecStorageModel{
		Hdd: flattenYandexYtsaurusClusterSpecStorageHdd(ctx, yandexYtsaurusClusterSpecStorage.GetHdd(), diags),
		Ssd: flattenYandexYtsaurusClusterSpecStorageSsd(ctx, yandexYtsaurusClusterSpecStorage.GetSsd(), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexYtsaurusClusterSpecStorage(ctx context.Context, yandexYtsaurusClusterSpecStorageState types.Object, diags *diag.Diagnostics) *ytsaurus.StorageSpec {
	if yandexYtsaurusClusterSpecStorageState.IsNull() || yandexYtsaurusClusterSpecStorageState.IsUnknown() {
		return nil
	}
	var yandexYtsaurusClusterSpecStorage yandexYtsaurusClusterSpecStorageModel
	diags.Append(yandexYtsaurusClusterSpecStorageState.As(ctx, &yandexYtsaurusClusterSpecStorage, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexYtsaurusClusterSpecStorageModel(ctx, yandexYtsaurusClusterSpecStorage, diags)
}

func expandYandexYtsaurusClusterSpecStorageModel(ctx context.Context, yandexYtsaurusClusterSpecStorageState yandexYtsaurusClusterSpecStorageModel, diags *diag.Diagnostics) *ytsaurus.StorageSpec {
	value := &ytsaurus.StorageSpec{}
	value.SetHdd(expandYandexYtsaurusClusterSpecStorageHdd(ctx, yandexYtsaurusClusterSpecStorageState.Hdd, diags))
	value.SetSsd(expandYandexYtsaurusClusterSpecStorageSsd(ctx, yandexYtsaurusClusterSpecStorageState.Ssd, diags))
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexYtsaurusClusterSpecStorageHddModel struct {
	Count  types.Int64 `tfsdk:"count"`
	SizeGb types.Int64 `tfsdk:"size_gb"`
}

var yandexYtsaurusClusterSpecStorageHddModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"count":   types.Int64Type,
		"size_gb": types.Int64Type,
	},
}

func flattenYandexYtsaurusClusterSpecStorageHdd(ctx context.Context,
	yandexYtsaurusClusterSpecStorageHdd *ytsaurus.StorageSpec_HddSpec,
	diags *diag.Diagnostics) types.Object {
	if yandexYtsaurusClusterSpecStorageHdd == nil {
		return types.ObjectNull(yandexYtsaurusClusterSpecStorageHddModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexYtsaurusClusterSpecStorageHddModelType.AttrTypes, yandexYtsaurusClusterSpecStorageHddModel{
		Count:  types.Int64Value(int64(yandexYtsaurusClusterSpecStorageHdd.GetCount())),
		SizeGb: types.Int64Value(int64(yandexYtsaurusClusterSpecStorageHdd.GetSizeGb())),
	})
	diags.Append(diag...)
	return value
}

func expandYandexYtsaurusClusterSpecStorageHdd(ctx context.Context, yandexYtsaurusClusterSpecStorageHddState types.Object, diags *diag.Diagnostics) *ytsaurus.StorageSpec_HddSpec {
	if yandexYtsaurusClusterSpecStorageHddState.IsNull() || yandexYtsaurusClusterSpecStorageHddState.IsUnknown() {
		return nil
	}
	var yandexYtsaurusClusterSpecStorageHdd yandexYtsaurusClusterSpecStorageHddModel
	diags.Append(yandexYtsaurusClusterSpecStorageHddState.As(ctx, &yandexYtsaurusClusterSpecStorageHdd, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexYtsaurusClusterSpecStorageHddModel(ctx, yandexYtsaurusClusterSpecStorageHdd, diags)
}

func expandYandexYtsaurusClusterSpecStorageHddModel(ctx context.Context, yandexYtsaurusClusterSpecStorageHddState yandexYtsaurusClusterSpecStorageHddModel, diags *diag.Diagnostics) *ytsaurus.StorageSpec_HddSpec {
	value := &ytsaurus.StorageSpec_HddSpec{}
	value.SetCount((yandexYtsaurusClusterSpecStorageHddState.Count.ValueInt64()))
	value.SetSizeGb((yandexYtsaurusClusterSpecStorageHddState.SizeGb.ValueInt64()))
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexYtsaurusClusterSpecStorageSsdModel struct {
	Count  types.Int64  `tfsdk:"count"`
	SizeGb types.Int64  `tfsdk:"size_gb"`
	Type   types.String `tfsdk:"type"`
}

var yandexYtsaurusClusterSpecStorageSsdModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"count":   types.Int64Type,
		"size_gb": types.Int64Type,
		"type":    types.StringType,
	},
}

func flattenYandexYtsaurusClusterSpecStorageSsd(ctx context.Context,
	yandexYtsaurusClusterSpecStorageSsd *ytsaurus.StorageSpec_SsdSpec,
	diags *diag.Diagnostics) types.Object {
	if yandexYtsaurusClusterSpecStorageSsd == nil {
		return types.ObjectNull(yandexYtsaurusClusterSpecStorageSsdModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexYtsaurusClusterSpecStorageSsdModelType.AttrTypes, yandexYtsaurusClusterSpecStorageSsdModel{
		Count:  types.Int64Value(int64(yandexYtsaurusClusterSpecStorageSsd.GetCount())),
		SizeGb: types.Int64Value(int64(yandexYtsaurusClusterSpecStorageSsd.GetSizeGb())),
		Type:   types.StringValue(yandexYtsaurusClusterSpecStorageSsd.GetType()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexYtsaurusClusterSpecStorageSsd(ctx context.Context, yandexYtsaurusClusterSpecStorageSsdState types.Object, diags *diag.Diagnostics) *ytsaurus.StorageSpec_SsdSpec {
	if yandexYtsaurusClusterSpecStorageSsdState.IsNull() || yandexYtsaurusClusterSpecStorageSsdState.IsUnknown() {
		return nil
	}
	var yandexYtsaurusClusterSpecStorageSsd yandexYtsaurusClusterSpecStorageSsdModel
	diags.Append(yandexYtsaurusClusterSpecStorageSsdState.As(ctx, &yandexYtsaurusClusterSpecStorageSsd, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexYtsaurusClusterSpecStorageSsdModel(ctx, yandexYtsaurusClusterSpecStorageSsd, diags)
}

func expandYandexYtsaurusClusterSpecStorageSsdModel(ctx context.Context, yandexYtsaurusClusterSpecStorageSsdState yandexYtsaurusClusterSpecStorageSsdModel, diags *diag.Diagnostics) *ytsaurus.StorageSpec_SsdSpec {
	value := &ytsaurus.StorageSpec_SsdSpec{}
	value.SetCount((yandexYtsaurusClusterSpecStorageSsdState.Count.ValueInt64()))
	value.SetSizeGb((yandexYtsaurusClusterSpecStorageSsdState.SizeGb.ValueInt64()))
	value.SetType(yandexYtsaurusClusterSpecStorageSsdState.Type.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexYtsaurusClusterSpecTabletModel struct {
	Count  types.Int64  `tfsdk:"count"`
	Preset types.String `tfsdk:"preset"`
}

var yandexYtsaurusClusterSpecTabletModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"count":  types.Int64Type,
		"preset": types.StringType,
	},
}

func flattenYandexYtsaurusClusterSpecTablet(ctx context.Context,
	yandexYtsaurusClusterSpecTablet *ytsaurus.TabletSpec,
	diags *diag.Diagnostics) types.Object {
	if yandexYtsaurusClusterSpecTablet == nil {
		return types.ObjectNull(yandexYtsaurusClusterSpecTabletModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexYtsaurusClusterSpecTabletModelType.AttrTypes, yandexYtsaurusClusterSpecTabletModel{
		Count:  types.Int64Value(int64(yandexYtsaurusClusterSpecTablet.GetCount())),
		Preset: types.StringValue(yandexYtsaurusClusterSpecTablet.GetPreset()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexYtsaurusClusterSpecTablet(ctx context.Context, yandexYtsaurusClusterSpecTabletState types.Object, diags *diag.Diagnostics) *ytsaurus.TabletSpec {
	if yandexYtsaurusClusterSpecTabletState.IsNull() || yandexYtsaurusClusterSpecTabletState.IsUnknown() {
		return nil
	}
	var yandexYtsaurusClusterSpecTablet yandexYtsaurusClusterSpecTabletModel
	diags.Append(yandexYtsaurusClusterSpecTabletState.As(ctx, &yandexYtsaurusClusterSpecTablet, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexYtsaurusClusterSpecTabletModel(ctx, yandexYtsaurusClusterSpecTablet, diags)
}

func expandYandexYtsaurusClusterSpecTabletModel(ctx context.Context, yandexYtsaurusClusterSpecTabletState yandexYtsaurusClusterSpecTabletModel, diags *diag.Diagnostics) *ytsaurus.TabletSpec {
	value := &ytsaurus.TabletSpec{}
	value.SetCount((yandexYtsaurusClusterSpecTabletState.Count.ValueInt64()))
	value.SetPreset(yandexYtsaurusClusterSpecTabletState.Preset.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}
